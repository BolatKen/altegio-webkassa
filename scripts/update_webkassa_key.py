#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞ Webkassa –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 5 —É—Ç—Ä–∞.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ cron –∏–ª–∏ systemd timer.
"""

import asyncio
import os
import sys
import logging
from datetime import datetime
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –º–æ–¥—É–ª—é
sys.path.append('/app')

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select
from app.models import ApiKey
import httpx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/app/logs/webkassa_key_update.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class WebkassaKeyUpdater:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞ Webkassa"""
    
    def __init__(self):
        # –°—Ç—Ä–æ–∏–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        db_user = os.getenv("POSTGRES_USER", "postgres")
        db_password = os.getenv("POSTGRES_PASSWORD", "postgres")
        db_host = os.getenv("POSTGRES_HOST", "db")
        db_port = os.getenv("POSTGRES_PORT", "5432")
        db_name = os.getenv("POSTGRES_DB", "altegio_webkassa_db")
        
        self.db_url = f"postgresql+asyncpg://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
        
        self.webkassa_login = os.getenv("WEBKASSA_LOGIN")
        self.webkassa_password = os.getenv("WEBKASSA_PASSWORD")
        self.webkassa_auth_url = os.getenv("WEBKASSA_AUTH_URL", "https://api.webkassa.kz/api/Authorize")
        
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.engine = create_async_engine(self.db_url)
        self.SessionLocal = sessionmaker(
            self.engine,
            class_=AsyncSession,
            expire_on_commit=False
        )
    
    async def get_new_webkassa_token(self) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω –æ—Ç Webkassa —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        """
        if not self.webkassa_login or not self.webkassa_password:
            logger.error("Webkassa login credentials not configured in environment variables")
            return None
            
        auth_data = {
            "Login": self.webkassa_login,
            "Password": self.webkassa_password
        }
        
        try:
            async with httpx.AsyncClient() as client:
                logger.info(f"Requesting new token from {self.webkassa_auth_url}")
                response = await client.post(
                    self.webkassa_auth_url,
                    json=auth_data,
                    timeout=30
                )
                response.raise_for_status()
                
                result = response.json()
                logger.info("Successfully received new token from Webkassa")
                logger.info(f"üìã Full API response: {result}")
                return result
                
        except httpx.RequestError as e:
            logger.error(f"Network error while getting Webkassa token: {e}")
            return None
        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP error {e.response.status_code} while getting Webkassa token: {e.response.text}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error while getting Webkassa token: {e}")
            return None
    
    async def update_api_key_in_db(self, new_token: str, user_id: str = None) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç API –∫–ª—é—á Webkassa –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            async with self.SessionLocal() as db:
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                result = await db.execute(
                    select(ApiKey).filter(ApiKey.service_name == "Webkassa")
                )
                api_key_record = result.scalars().first()
                
                if api_key_record:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    old_key = api_key_record.api_key[:20] + "..." if api_key_record.api_key else "None"
                    logger.info(f"üìù Found existing API key record (old key: {old_key})")
                    
                    api_key_record.api_key = new_token
                    if user_id:
                        api_key_record.user_id = user_id
                    api_key_record.updated_at = datetime.utcnow()
                    
                    new_key = new_token[:20] + "..." if new_token else "None"
                    logger.info(f"‚úèÔ∏è Updated API key: {old_key} -> {new_key}")
                    logger.info(f"üìÖ Updated timestamp: {api_key_record.updated_at}")
                    if user_id:
                        logger.info(f"üë§ Updated user_id: {user_id}")
                    logger.info("Updated existing Webkassa API key in database")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    new_key = new_token[:20] + "..." if new_token else "None"
                    logger.info(f"üìù Creating new API key record")
                    logger.info(f"üîë New API key: {new_key}")
                    if user_id:
                        logger.info(f"üë§ User ID: {user_id}")
                    
                    api_key_record = ApiKey(
                        service_name="Webkassa",
                        api_key=new_token,
                        user_id=user_id
                    )
                    db.add(api_key_record)
                    logger.info("Created new Webkassa API key record in database")
                
                await db.commit()
                logger.info("Successfully committed API key changes to database")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –≤ –±–∞–∑—É
                await db.refresh(api_key_record)
                saved_key = api_key_record.api_key[:20] + "..." if api_key_record.api_key else "None"
                logger.info(f"‚úÖ Verified in database - API key: {saved_key}")
                logger.info(f"‚úÖ Verified in database - Service: {api_key_record.service_name}")
                logger.info(f"‚úÖ Verified in database - Updated at: {api_key_record.updated_at}")
                if api_key_record.user_id:
                    logger.info(f"‚úÖ Verified in database - User ID: {api_key_record.user_id}")
                
                return True
                
        except Exception as e:
            logger.error(f"Error updating API key in database: {e}")
            return False
    
    async def validate_new_token(self, token: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Webkassa API
        """
        test_url = os.getenv("WEBKASSA_API_URL")
        if not test_url:
            logger.warning("WEBKASSA_API_URL not configured, skipping token validation")
            return True  # –°—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {token}"
        }
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
        try:
            async with httpx.AsyncClient() as client:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ endpoint –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Å—Å–∞—Ö
                test_endpoint = f"{test_url.rstrip('/')}/api/CashBox"
                response = await client.get(
                    test_endpoint,
                    headers=headers,
                    timeout=10
                )
                
                if response.status_code == 200:
                    logger.info("New token validation successful")
                    logger.info(f"‚úÖ Token validation response: {response.status_code}")
                    return True
                elif response.status_code == 401:
                    logger.error("New token validation failed: Unauthorized")
                    logger.error(f"‚ùå Token validation response: {response.status_code}")
                    return False
                else:
                    logger.warning(f"Token validation returned status {response.status_code}, assuming valid")
                    logger.info(f"‚ö†Ô∏è Token validation response: {response.status_code}")
                    return True  # –°—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
                    
        except Exception as e:
            logger.warning(f"Token validation failed with error: {e}, assuming valid")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–º
    
    async def run_update(self) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞
        """
        logger.info("Starting Webkassa API key update process")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            logger.info("üîÑ Step 1: Requesting new token from Webkassa API...")
            token_data = await self.get_new_webkassa_token()
            if not token_data:
                logger.error("Failed to get new token from Webkassa")
                return False
            
            logger.info("üîç Step 2: Parsing token data...")
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞
            # Webkassa –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {"Data":{"Token":"..."}}
            new_token = None
            user_id = None
            
            if "Data" in token_data and "Token" in token_data["Data"]:
                new_token = token_data["Data"]["Token"]
                logger.info("üìã Found token in Data.Token field")
            elif "token" in token_data:
                new_token = token_data["token"]
                logger.info("üìã Found token in token field")
            elif "access_token" in token_data:
                new_token = token_data["access_token"]
                logger.info("üìã Found token in access_token field")
            elif "api_key" in token_data:
                new_token = token_data["api_key"]
                logger.info("üìã Found token in api_key field")
            else:
                logger.error(f"Unable to extract token from response: {token_data}")
                return False
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–ª—è Webkassa –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–µ–Ω)
            if "Data" in token_data and "UserId" in token_data["Data"]:
                user_id = str(token_data["Data"]["UserId"])
                logger.info("üìã Found user_id in Data.UserId field")
            elif "user_id" in token_data:
                user_id = str(token_data["user_id"])
                logger.info("üìã Found user_id in user_id field")
            elif "id" in token_data:
                user_id = str(token_data["id"])
                logger.info("üìã Found user_id in id field")
            
            logger.info(f"üîë Extracted token: {new_token[:20]}...{new_token[-10:] if len(new_token) > 30 else new_token[20:]}")
            if user_id:
                logger.info(f"üë§ Extracted user_id: {user_id}")
            else:
                logger.info("üë§ No user_id found in response (this is normal for Webkassa)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            logger.info("üîç Step 3: Validating new token...")
            if not await self.validate_new_token(new_token):
                logger.error("New token validation failed")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            logger.info("üíæ Step 4: Saving token to database...")
            if await self.update_api_key_in_db(new_token, user_id):
                logger.info("‚úÖ Webkassa API key update completed successfully")
                return True
            else:
                logger.error("‚ùå Failed to update API key in database")
                return False
                
        except Exception as e:
            logger.error(f"Unexpected error during API key update: {e}", exc_info=True)
            return False
        finally:
            await self.engine.dispose()


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞"""
    updater = WebkassaKeyUpdater()
    success = await updater.run_update()
    
    if success:
        logger.info("üéâ Webkassa API key update process completed successfully")
        sys.exit(0)
    else:
        logger.error("üí• Webkassa API key update process failed")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
