"""
–ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç Altegio
"""
import logging
import json
import os
import re
import sys
import subprocess
import asyncio
from datetime import datetime
from typing import Dict, Any, Optional, Union, List, Tuple
import uuid

import httpx
from fastapi import APIRouter, HTTPException, Depends, Request
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from app.db import get_db_session
from app.models import WebhookRecord, ApiKey
from app.schemas.altegio import AltegioWebhookPayload, WebhookResponse

router = APIRouter()
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π —Å –∫–æ–º–∏—Å—Å–∏–µ–π —ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞
ACQUIRING_COMMISSION_COMMENT = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ —ç–∫–≤–∞–π—Ä–∏–Ω–≥."

def should_skip_transaction(transaction_comment: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    """
    return transaction_comment == ACQUIRING_COMMISSION_COMMENT

def get_client_data(client) -> Tuple[str, str]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    Returns: (client_phone, client_name)
    """
    client_phone = ""
    client_name = ""
    
    if client:
        if isinstance(client, dict):
            client_phone = client.get('phone', '')
            client_name = client.get('name', '')
        elif isinstance(client, list) and client:
            first_client = client[0]
            if isinstance(first_client, dict):
                client_phone = first_client.get('phone', '')
                client_name = first_client.get('name', '')
        elif hasattr(client, 'phone'):
            client_phone = client.phone
            client_name = client.name
    
    return client_phone, client_name

async def send_telegram_notification(message: str, error_details: dict = None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    """
    logger.info(f"üì± Telegram notification: {message}")
    if error_details:
        logger.info(f"üìã Error details: {error_details}")
    return True

async def close_webkassa_shift(db: AsyncSession, api_token: str, webhook_info: dict = None) -> dict:
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É –≤ Webkassa API
    """
    webkassa_api_url = os.getenv("WEBKASSA_API_URL", "https://api.webkassa.kz")
    endpoint_url = f"{webkassa_api_url.rstrip('/')}/api/ShiftClose"
    
    headers = {
        "Content-Type": "application/json",
        "X-API-KEY": "WKD-68D0CA3C-191F-4DBB-B280-D483724EA7A9"
    }
    
    request_data = {
        "Token": api_token,
        "CashboxUniqueNumber": os.getenv("WEBKASSA_CASHBOX_ID")
    }
    
    logger.info(f"üîí Attempting to close Webkassa shift at {endpoint_url}")
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(endpoint_url, json=request_data, headers=headers, timeout=30)
            response_data = response.json()
            
            if "Errors" in response_data and response_data["Errors"]:
                error_messages = []
                for error in response_data["Errors"]:
                    error_text = error.get("Text", "")
                    error_code = error.get("Code", "")
                    error_messages.append(f"Code {error_code}: {error_text}")
                
                return {"success": False, "errors": error_messages, "raw_response": response_data}
            
            response.raise_for_status()
            return {"success": True, "data": response_data}
            
    except Exception as e:
        logger.error(f"‚ùå Error closing Webkassa shift: {e}")
        return {"success": False, "error": str(e)}

def ensure_queue_worker_running():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ webhook
    """
    logger.info("üîÑ Ensuring queue worker is running")
    pass

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
webhook_processing_semaphore = asyncio.Semaphore(1)  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω webhook –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
webhook_processing_queue = asyncio.Queue()

class WebhookTask:
    def __init__(self, payload, request, db_session):
        self.payload = payload
        self.request = request
        self.db_session = db_session
        self.task_id = getattr(payload, "resource_id", None)

    async def run(self):
        return await process_webhook_internal(self.payload, self.request, self.db_session)


def decode_unicode_escapes(text: str) -> str:
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç Unicode escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    –ù–∞–ø—Ä–∏–º–µ—Ä: "\\u0421\\u0440\\u043e\\u043a" -> "–°—Ä–æ–∫"
    """
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª—ç—à—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
        text = text.replace('\\\\u', '\\u')
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º unicode escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        def decode_match(match):
            try:
                unicode_char = match.group(0)
                return unicode_char.encode().decode('unicode_escape')
            except:
                return match.group(0)
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã \uXXXX –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏—Ö
        result = re.sub(r'\\u[0-9a-fA-F]{4}', decode_match, text)
        return result
    except Exception as e:
        logger.warning(f"Failed to decode unicode escapes in: {text[:100]}..., error: {e}")
        return text


def format_api_response(response_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –ª–æ–≥–æ–≤ —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º Unicode
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON —Å—Ç—Ä–æ–∫—É
        response_str = json.dumps(response_data, ensure_ascii=False, indent=2)
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º Unicode escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        decoded_str = decode_unicode_escapes(response_str)
        
        return decoded_str
    except Exception as e:
        logger.warning(f"Failed to format API response: {e}")
        return str(response_data)


async def verify_webhook_signature(request: Request) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –æ—Ç Altegio
    TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏/—Ç–æ–∫–µ–Ω–∞ –æ—Ç Altegio
    """
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    signature = request.headers.get("X-Altegio-Signature")
    token = request.headers.get("Authorization")
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    # if not signature or not verify_signature(signature, body, secret):
    #     return False
    
    logger.info(f"Webhook signature check - Signature: {signature}, Token: {token}")
    return True  # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É


async def get_altegio_document(company_id: int, document_id: int) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ Altegio API.
    """
    altegio_api_url = os.getenv("ALTEGIO_API_URL", "https://api.alteg.io/api/v1")
    altegio_auth_token = os.getenv("ALTEGIO_AUTH_TOKEN") # Bearer token
    altegio_user_id = os.getenv("ALTEGIO_USER_ID") # User ID

    if not altegio_auth_token or not altegio_user_id:
        logger.error("Altegio API credentials not configured in .env")
        raise HTTPException(status_code=500, detail="Altegio API credentials not configured")

    url = f"{altegio_api_url}/transactions/{company_id}/?document_id={document_id}"
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_variants = [
        {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {altegio_auth_token}, User {altegio_user_id}",
            "Accept": "application/vnd.api.v2+json"
        },
    ]

    logger.info(f"Making request to Altegio API: {url}")

    for i, headers in enumerate(header_variants):
        try:
            logger.info(f"Attempt {i+1}: Using headers: {[key for key in headers.keys() if key != 'Authorization']}")
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, headers=headers, timeout=30)
                response.raise_for_status()
                logger.info(f"Success with header variant {i+1}")
                return response.json()
                
        except httpx.HTTPStatusError as e:
            logger.warning(f"Attempt {i+1} failed with status {e.response.status_code}: {e.response.text}")
            if i == len(header_variants) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                logger.error(f"All header variants failed. Last error: {e.response.text}")
                raise HTTPException(status_code=e.response.status_code, detail=f"Altegio API error: {e.response.text}")
            continue
        except httpx.RequestError as e:
            logger.error(f"Altegio API request failed: {e}")
            raise HTTPException(status_code=500, detail=f"Altegio API request failed: {e}")
        except Exception as e:
            logger.error(f"Unexpected error fetching Altegio document: {e}")
            raise HTTPException(status_code=500, detail=f"Unexpected error: {e}")
    
    # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    raise HTTPException(status_code=500, detail="Failed to authenticate with Altegio API")


async def get_altegio_sale_document(company_id: int, document_id: int) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ Altegio API.
    """
    altegio_api_url = os.getenv("ALTEGIO_API_URL", "https://api.alteg.io/api/v1")
    altegio_auth_token = os.getenv("ALTEGIO_AUTH_TOKEN") # Bearer token
    altegio_user_id = os.getenv("ALTEGIO_USER_ID") # User ID

    if not altegio_auth_token or not altegio_user_id:
        logger.error("Altegio API credentials not configured in .env")
        raise HTTPException(status_code=500, detail="Altegio API credentials not configured")

    url = f"{altegio_api_url}/company/{company_id}/sale/{document_id}"
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_variants = [
        {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {altegio_auth_token}, User {altegio_user_id}",
            "Accept": "application/vnd.api.v2+json"
        },
    ]

    logger.info(f"Making request to Altegio API: {url}")

    for i, headers in enumerate(header_variants):
        try:
            logger.info(f"Attempt {i+1}: Using headers: {[key for key in headers.keys() if key != 'Authorization']}")
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, headers=headers, timeout=30)
                response.raise_for_status()
                logger.info(f"Success with header variant {i+1}")
                return response.json()
                
        except httpx.HTTPStatusError as e:
            logger.warning(f"Attempt {i+1} failed with status {e.response.status_code}: {e.response.text}")
            if i == len(header_variants) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                logger.error(f"All header variants failed. Last error: {e.response.text}")
                raise HTTPException(status_code=e.response.status_code, detail=f"Altegio API error: {e.response.text}")
            continue
        except httpx.RequestError as e:
            logger.error(f"Altegio API request failed: {e}")
            raise HTTPException(status_code=500, detail=f"Altegio API request failed: {e}")
        except Exception as e:
            logger.error(f"Unexpected error fetching Altegio document: {e}")
            raise HTTPException(status_code=500, detail=f"Unexpected error: {e}")
    
    # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    raise HTTPException(status_code=500, detail="Failed to authenticate with Altegio API")



async def refresh_webkassa_api_key(db: AsyncSession) -> Optional[ApiKey]:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç API –∫–ª—é—á Webkassa, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    """
    logger.info("üîÑ Attempting to refresh Webkassa API key...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞
        import subprocess
        import sys
        
        logger.info("üìû Calling update script...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
        script_path = "/app/scripts/update_webkassa_key.py"
        if not os.path.exists(script_path):
            logger.error(f"‚ùå Update script not found at {script_path}")
            return None
        
        result = subprocess.run([
            sys.executable, script_path
        ], capture_output=True, text=True, cwd="/app", timeout=60)  # –î–æ–±–∞–≤–ª—è–µ–º timeout
        
        logger.info(f"üìù Script return code: {result.returncode}")
        logger.info(f"üìù Script stdout: {result.stdout[-500:]}")  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
        if result.stderr:
            logger.warning(f"üìù Script stderr: {result.stderr[-500:]}")
        
        if result.returncode == 0:
            logger.info("‚úÖ API key update script completed successfully")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
            import asyncio
            await asyncio.sleep(1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º –∫–ª—é—á
            await db.commit()
            # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º rollback() - —ç—Ç–æ –æ—Ç–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è!
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            
            return await get_webkassa_api_key(db)
        else:
            logger.error(f"‚ùå API key update script failed with code {result.returncode}")
            logger.error(f"‚ùå Script error: {result.stderr}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ —Å–∫—Ä–∏–ø—Ç–∞
            await send_telegram_notification(
                "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞ Webkassa",
                {
                    "–ö–æ–¥ –æ—à–∏–±–∫–∏": str(result.returncode),
                    "STDOUT": result.stdout[-300:] if result.stdout else "–ü—É—Å—Ç–æ",
                    "STDERR": result.stderr[-300:] if result.stderr else "–ü—É—Å—Ç–æ",
                    "–ü—É—Ç—å —Å–∫—Ä–∏–ø—Ç–∞": script_path,
                    "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è": "/app"
                }
            )
            
            return None
            
    except subprocess.TimeoutExpired:
        logger.error("‚ùå API key update script timed out after 60 seconds")
        await send_telegram_notification(
            "–¢–∞–π–º–∞—É—Ç —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞ Web–∫assa",
            {
                "–ü—Ä–æ–±–ª–µ–º–∞": "–°–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 60 —Å–µ–∫—É–Ω–¥",
                "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API Webkassa –∏ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
            }
        )
        return None
    except Exception as e:
        logger.error(f"‚ùå Error refreshing API key: {e}", exc_info=True)
        await send_telegram_notification(
            "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞ Web–∫assa",
            {
                "–û—à–∏–±–∫–∞": str(e),
                "–¢–∏–ø –æ—à–∏–±–∫–∏": type(e).__name__,
                "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"
            }
        )
        return None


async def get_webkassa_api_key(db: AsyncSession) -> Optional[ApiKey]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á Web–∫assa –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    """
    logger.info("üîç Searching for Webkassa API key in database...")
    
    try:
        result = await db.execute(select(ApiKey).filter(ApiKey.service_name == "Webkassa"))
        api_key_obj = result.scalars().first()
        
        if api_key_obj:
            logger.info(f"‚úÖ Found Webkassa API key in database:")
            logger.info(f"   üîë Key ID: {api_key_obj.id}")
            logger.info(f"   üè∑Ô∏è Service: {api_key_obj.service_name}")
            logger.info(f"   üë§ User ID (token): {api_key_obj.user_id}")
            logger.info(f"   üóìÔ∏è Created: {api_key_obj.created_at}")
            logger.info(f"   üóìÔ∏è Updated: {api_key_obj.updated_at}")
            logger.info(f"   üîê API Key (first 20 chars): {api_key_obj.api_key[:20]}...")
            logger.info(f"   üîê API Key (last 20 chars): ...{api_key_obj.api_key[-20:]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫–ª—é—á–∞
            from datetime import datetime, timezone
            if api_key_obj.updated_at:
                age = datetime.now(timezone.utc) - api_key_obj.updated_at.replace(tzinfo=timezone.utc)
                logger.info(f"   ‚è∞ Key age: {age.total_seconds() / 3600:.1f} hours")
                
                if age.total_seconds() > 21600:  # 6 —á–∞—Å–æ–≤
                    logger.warning(f"‚ö†Ô∏è API key is older than 6 hours, might be expired!")
            
            return api_key_obj
        else:
            logger.error("‚ùå No Webkassa API key found in database!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ –ë–î –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            all_keys_result = await db.execute(select(ApiKey))
            all_keys = all_keys_result.scalars().all()
            
            if all_keys:
                logger.info(f"üìã Found {len(all_keys)} total API keys in database:")
                for key in all_keys:
                    logger.info(f"   - Service: {key.service_name}, ID: {key.id}")
            else:
                logger.error("‚ùå Database has no API keys at all!")
            
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Error fetching Webkassa API key from database: {e}")
        return None


async def prepare_webkassa_data(payload: AltegioWebhookPayload, altegio_document: Dict[str, Any], db: AsyncSession, webkassa_token: str = None) -> Dict[str, Any]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Altegio webhook –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π Webkassa.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    if not webkassa_token:
        api_key_record = await get_webkassa_api_key(db)
        if not api_key_record:
            logger.warning("‚ö†Ô∏è No Webkassa API key found, attempting to get fresh key...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á
            refreshed_key = await refresh_webkassa_api_key(db)
            if refreshed_key:
                api_key_record = refreshed_key
                logger.info("‚úÖ Successfully obtained fresh API key for data preparation")
            else:
                error_msg = "Webkassa API key not found in database and unable to refresh"
                logger.error(f"‚ùå {error_msg}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
                client_phone, client_name = get_client_data(payload.data.client)
                await send_telegram_notification(
                    "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á Web–∫assa –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                    {
                        "–ü—Ä–æ–±–ª–µ–º–∞": "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π",
                        "Webhook ID": str(payload.resource_id),
                        "Company ID": str(payload.company_id),
                        "–ö–ª–∏–µ–Ω—Ç": client_name if client_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
                        "–¢–µ–ª–µ—Ñ–æ–Ω": client_phone if client_phone else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
                        "–í–ª–∏—è–Ω–∏–µ": "–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
                        "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Webkassa API –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π"
                    }
                )
                
                raise ValueError(error_msg)
        
        webkassa_token = api_key_record.api_key
        logger.info(f"üîë Using webkassa token from database: {webkassa_token}")
    
    logger.info(f"üîÑ Starting data transformation for Webkassa")
    client_phone, client_name = get_client_data(payload.data.client)
    
    logger.info(f"üì• Input webhook data: client_phone={client_phone}, resource_id={payload.resource_id}")
    logger.info(f"üì• Input services count: {len(payload.data.services)}")
    logger.info(f"üì• Input altegio_document type: {type(altegio_document)}")
    if isinstance(altegio_document, dict):
        logger.info(f"üì• Input altegio_document transactions count: {len(altegio_document.get('data', []))}")
    elif isinstance(altegio_document, list):
        logger.info(f"üì• Input altegio_document transactions count: {len(altegio_document)}")
    else:
        logger.info(f"üì• Input altegio_document has unknown format: {altegio_document}")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Altegio webhook
    # resource_id = payload.resource_id
    services = payload.data.services
    goods = payload.data.goods_transactions

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Altegio document
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –æ–±—ã—á–Ω—ã–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ goods sale document
    transactions = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏ —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if isinstance(altegio_document, dict):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ goods sale document
        if altegio_document.get('data', {}) and isinstance(altegio_document.get('data', {}), dict) and altegio_document.get('data', {}).get('state'):
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è goods_operations_sale
            logger.info(f"üì¶ Processing goods sale document format")
            sale_transactions = altegio_document.get('data', {}).get('state', {}).get('payment_transactions', [])
            transactions = sale_transactions
            logger.info(f"üì• Found {len(transactions)} payment transactions in goods sale document")
        else:
            # –°–ª–æ–≤–∞—Ä—å, –Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            logger.info(f"üìã Processing standard transactions document format (dict)")
            transactions = altegio_document.get('data', [])
            logger.info(f"üì• Found {len(transactions)} transactions in standard document (dict)")
    elif isinstance(altegio_document, list):
        # –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        logger.info(f"üìã Processing standard transactions document format (list)")
        transactions = altegio_document
        logger.info(f"üì• Found {len(transactions)} transactions in standard document (list)")
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
        logger.warning(f"Unknown altegio_document format: {type(altegio_document)}")
        transactions = []
        logger.info(f"üì• Found {len(transactions)} transactions (unknown format)")

    positions = []
    payments = []

    logger.info(f"üõçÔ∏è Processing {len(services)} services from webhook:")

    total_sum_for_webkassa = 0

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π (—É—Å–ª—É–≥) –∏–∑ webhook
    for i, service in enumerate(services):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
        original_price_per_unit = service.cost_per_unit
        discount_amount = (service.cost_per_unit * service.amount) - service.cost_to_pay
        service_total = service.cost_to_pay  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ
        
        position = {
            "Count": service.amount,
            "Price": original_price_per_unit,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
            "PositionName": service.title,
            "Discount": discount_amount,  # –°–∫–∏–¥–∫–∞ –≤ —Ç–µ–Ω–≥–µ
            "Tax": "0",
            "TaxType": "0", 
            "TaxPercent": "0"
        }
        positions.append(position)
        total_sum_for_webkassa += service_total
        
        logger.info(f"  üì¶ Service {i+1}: {service.title}")
        logger.info(f"     üíµ Original cost: {service.cost_per_unit} —Ç–µ–Ω–≥–µ x {service.amount} = {(service.cost_per_unit * service.amount)} —Ç–µ–Ω–≥–µ")
        logger.info(f"     üé´ Discount: {service.discount}% = {(service.cost_per_unit * service.amount) - service.cost_to_pay} —Ç–µ–Ω–≥–µ")
        logger.info(f"     üí∞ Final price per unit: {final_price_per_unit} —Ç–µ–Ω–≥–µ")
        logger.info(f"     üí∞ Total to pay: {service_total} —Ç–µ–Ω–≥–µ")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ webhook (goods_transactions)
    for i, good in enumerate(goods):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
        original_price_per_unit = good["cost_per_unit"]
        original_total = original_price_per_unit * abs(good["amount"])
        good_total = good.get("cost_to_pay", original_total * (1 - good["discount"] / 100))
        discount_amount = original_total - good_total
        
        position = {
            "Count": abs(good["amount"]),
            "Price": original_price_per_unit,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
            "PositionName": good["title"],
            "Discount": discount_amount,  # –°–∫–∏–¥–∫–∞ –≤ —Ç–µ–Ω–≥–µ
            "Tax": "0",
            "TaxType": "0", 
            "TaxPercent": "0"
        }
        positions.append(position)
        total_sum_for_webkassa += good_total
        
        logger.info(f"  üì¶ Good {i+1}: {good['title']}")
        logger.info(f"     üíµ Original cost: {original_price_per_unit} —Ç–µ–Ω–≥–µ x {abs(good['amount'])} = {original_total} —Ç–µ–Ω–≥–µ")
        logger.info(f"     üé´ Discount: {good['discount']}% = {discount_amount} —Ç–µ–Ω–≥–µ")
        logger.info(f"     üí∞ Total to pay: {good_total} —Ç–µ–Ω–≥–µ")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ transactions (—É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –≤—ã—à–µ)
    logger.info(f"üí≥ Processing {len(transactions)} transactions from Altegio document:")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ Altegio document (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
    for i, transaction in enumerate(transactions):
        amount = transaction.get('amount', 0)
        transaction_comment = transaction.get('comment', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏ —ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞
        if should_skip_transaction(transaction_comment):
            logger.info(f"  üö´ Skipping transaction {i+1}: acquiring commission fee (amount: {amount}, comment: '{transaction_comment}')")
            continue
            
        if amount > 0:
            account_info = transaction.get('account', {})
            is_cash = account_info.get('is_cash', True)
            account_title = account_info.get('title', 'Unknown')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ is_cash
            payment_type = 0 if is_cash else 1  # 0 = –Ω–∞–ª–∏—á–Ω—ã–µ, 1 = –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π

            payment = {
                "Sum": amount,
                "PaymentType": payment_type
            }
            payments.append(payment)
            
            payment_type_name = "–ù–∞–ª–∏—á–Ω—ã–µ" if payment_type == 0 else "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π"
            logger.info(f"  üí≥ Payment {i+1}: {amount} —Ç–µ–Ω–≥–µ ({payment_type_name})")
            logger.info(f"     üè¶ Account: {account_title}")
            if transaction_comment:
                logger.info(f"     üí¨ Comment: {transaction_comment}")

    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å—É–º–º—É –∏–∑ webhook
    if not payments:
        default_payment = {
            "Sum": total_sum_for_webkassa,
            "PaymentType": 1 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
        }
        payments.append(default_payment)
        logger.warning(f"‚ö†Ô∏è No payments found in Altegio document, using default payment: {total_sum_for_webkassa} —Ç–µ–Ω–≥–µ (–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π)")

    webkassa_data = {
        "CashboxUniqueNumber": os.getenv("WEBKASSA_CASHBOX_ID"),
        "OperationType": 2,  # –ü—Ä–æ–¥–∞–∂–∞
        "Positions": positions,
        "TicketModifiers": [],
        "Payments": payments,   
        "Change": 0.0,
        "RoundType": 2,
        "ExternalCheckNumber": payload.data.id,#str(uuid.uuid4()),  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        "CustomerPhone": client_phone
    }

    logger.info(f"‚úÖ Data transformation completed: check number {webkassa_data['ExternalCheckNumber']}")
    logger.info(f"   üìû Customer phone: {client_phone}")
    logger.info(f"   üì¶ Positions count: {len(positions)}")
    logger.info(f"   üí≥ Payments count: {len(payments)}")
    logger.info(f"   üí∞ Total amount: {total_sum_for_webkassa} —Ç–µ–Ω–≥–µ")
    logger.info(f"   üîë Token will be sent in Authorization header")
    
    return webkassa_data



async def prepare_webkassa_data_for_goods_sale(payload: AltegioWebhookPayload, altegio_document: Dict[str, Any], db: AsyncSession, webkassa_token: str = None) -> Dict[str, Any]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Altegio goods_operations_sale webhook –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π Web–∫assa.
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–æ–≤ - –¥–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    if not webkassa_token:
        api_key_record = await get_webkassa_api_key(db)
        if not api_key_record:
            logger.warning("‚ö†Ô∏è No Webkassa API key found, attempting to get fresh key...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á
            refreshed_key = await refresh_webkassa_api_key(db)
            if refreshed_key:
                api_key_record = refreshed_key
                logger.info("‚úÖ Successfully obtained fresh API key for goods sale data preparation")
            else:
                error_msg = "Webkassa API key not found in database and unable to refresh"
                logger.error(f"‚ùå {error_msg}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
                await send_telegram_notification(
                    "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á Web–∫assa –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤",
                    {
                        "–ü—Ä–æ–±–ª–µ–º–∞": "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π",
                        "Webhook ID": str(payload.resource_id),
                        "Company ID": str(payload.company_id),
                        "–¢–∏–ø": "goods_operations_sale",
                        "–í–ª–∏—è–Ω–∏–µ": "–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
                        "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Webkassa API –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π"
                    }
                )
                
                raise ValueError(error_msg)
        
        webkassa_token = api_key_record.api_key
        logger.info(f"üîë Using webkassa token from database: {webkassa_token}")
    
    logger.info(f"üõí Starting goods sale data transformation for Webkassa")
    client_phone, client_name = get_client_data(payload.data.client)
    logger.info(f"üì• Input goods sale webhook data: client_phone={client_phone}, resource_id={payload.resource_id}")
    
    positions = []
    payments = []
    total_sum_for_webkassa = 0

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏
    if isinstance(altegio_document, dict) and altegio_document.get('data', {}).get('state', {}).get('items'):
        sale_items = altegio_document.get('data', {}).get('state', {}).get('items', [])
        logger.info(f"üõí Processing {len(sale_items)} items from goods sale document:")
        
        for i, item in enumerate(sale_items):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ goods sale document
            item_count = abs(item.get('amount', 1))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            item_price = item.get('default_cost_per_unit', 0)
            item_discount_percent = item.get('client_discount_percent', 0)
            item_total = item.get('cost_to_pay_total', 0)
            
            position = {
                "Count": item_count,
                "Price": item_price,
                "PositionName": item.get('title', 'Unknown Item'),
                "Discount": (item_price * item_count) - item_total,  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –≤ —Ç–µ–Ω–≥–µ
                "Tax": "0",
                "TaxType": "0", 
                "TaxPercent": "0"
            }
            positions.append(position)
            total_sum_for_webkassa += item_total
            
            logger.info(f"  üõí Sale Item {i+1}: {item.get('title', 'Unknown')}")
            logger.info(f"     üíµ Price: {item_price} —Ç–µ–Ω–≥–µ x {item_count} = {item_price * item_count} —Ç–µ–Ω–≥–µ")
            logger.info(f"     üé´ Discount: {item_discount_percent}% = {(item_price * item_count) - item_total} —Ç–µ–Ω–≥–µ")
            logger.info(f"     üí∞ Total to pay: {item_total} —Ç–µ–Ω–≥–µ")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏
    if isinstance(altegio_document, dict) and altegio_document.get('data', {}).get('state', {}).get('payment_transactions'):
        sale_transactions = altegio_document.get('data', {}).get('state', {}).get('payment_transactions', [])
        logger.info(f"üí≥ Processing {len(sale_transactions)} payment transactions from goods sale document:")
        
        for i, transaction in enumerate(sale_transactions):
            amount = transaction.get('amount', 0)
            transaction_comment = transaction.get('comment', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏ —ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞
            if should_skip_transaction(transaction_comment):
                logger.info(f"  üö´ Skipping payment transaction {i+1}: acquiring commission fee (amount: {amount}, comment: '{transaction_comment}')")
                continue
                
            if amount > 0:
                account_info = transaction.get('account', {})
                is_cash = account_info.get('is_cash', True)
                account_title = account_info.get('title', 'Unknown')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ is_cash
                payment_type = 0 if is_cash else 1  # 0 = –Ω–∞–ª–∏—á–Ω—ã–µ, 1 = –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π

                payment = {
                    "Sum": amount,
                    "PaymentType": payment_type
                }
                payments.append(payment)
                
                payment_type_name = "–ù–∞–ª–∏—á–Ω—ã–µ" if payment_type == 0 else "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π"
                logger.info(f"  üí≥ Payment {i+1}: {amount} —Ç–µ–Ω–≥–µ ({payment_type_name})")
                logger.info(f"     üè¶ Account: {account_title}")
                if transaction_comment:
                    logger.info(f"     üí¨ Comment: {transaction_comment}")

    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å—É–º–º—É
    if not payments:
        default_payment = {
            "Sum": total_sum_for_webkassa,
            "PaymentType": 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π
        }
        payments.append(default_payment)
        logger.warning(f"‚ö†Ô∏è No payments found in goods sale document, using default payment: {total_sum_for_webkassa} —Ç–µ–Ω–≥–µ (–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π)")

    webkassa_data = {
        "CashboxUniqueNumber": os.getenv("WEBKASSA_CASHBOX_ID"),
        "OperationType": 2,  # –ü—Ä–æ–¥–∞–∂–∞
        "Positions": positions,
        "TicketModifiers": [],
        "Payments": payments,   
        "Change": 0.0,
        "RoundType": 2,
        "ExternalCheckNumber": payload.data.id,
        "CustomerPhone": client_phone
    }

    logger.info(f"‚úÖ Goods sale data transformation completed: check number {webkassa_data['ExternalCheckNumber']}")
    logger.info(f"   üìû Customer phone: {client_phone}")
    logger.info(f"   üì¶ Positions count: {len(positions)}")
    logger.info(f"   üí≥ Payments count: {len(payments)}")
    logger.info(f"   üí∞ Total amount: {total_sum_for_webkassa} —Ç–µ–Ω–≥–µ")
    logger.info(f"   üîë Token will be sent in Authorization header")
    
    return webkassa_data



async def send_to_webkassa_with_auto_refresh(db: AsyncSession, webkassa_data: dict, webhook_info: dict = None) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Webkassa API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–ª—é—á–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    
    Args:
        db: —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        webkassa_data: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Webkassa
        webhook_info: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key_record = await get_webkassa_api_key(db)

    if not api_key_record:
        error_message = "‚ùå No Webkassa API key found in database"
        logger.error(error_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        await send_telegram_notification(
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á Web–∫assa",
            {
                "–û—à–∏–±–∫–∞": "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                "–î–µ–π—Å—Ç–≤–∏–µ": "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞"
            }
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á
        logger.info("üîÑ Attempting to get fresh API key...")
        refreshed_key = await refresh_webkassa_api_key(db)
        if refreshed_key:
            api_key_record = refreshed_key
            logger.info("‚úÖ Successfully obtained fresh API key")
        else:
            final_error = "‚ùå Failed to obtain API key"
            logger.error(final_error)
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            await send_telegram_notification(
                "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á Web–∫assa",
                {
                    "–ü—Ä–æ–±–ª–µ–º–∞": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ",
                    "–í–ª–∏—è–Ω–∏–µ": "–§–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—è —á–µ–∫–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞",
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                }
            )
            
            return {"success": False, "error": "No API key found and unable to refresh"}
    
    api_token = api_key_record.api_key
    logger.info(f"üîë Using API token from database (ID: {api_key_record.id})")
    logger.info(f"üîë Token first 20 chars: {api_token[:20]}...")
    logger.info(f"üîë Token last 20 chars: ...{api_token[-20:]}")
    
    # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    result = await send_to_webkassa(webkassa_data, api_token, webhook_info)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not result["success"] and "errors" in result:
        # –ò—â–µ–º –æ—à–∏–±–∫—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ (–∫–æ–¥ 2)
        auth_error_found = False
        for error_msg in result["errors"]:
            if "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫" in error_msg or "Code 2:" in error_msg:
                auth_error_found = True
                break
        
        if auth_error_found:
            logger.warning("‚ö†Ô∏è Session expired error detected - attempting to refresh API key...")
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            logger.error(f"üîç Authorization error details:")
            logger.error(f"   üìã Error messages: {result.get('errors', [])}")
            logger.error(f"   üìã Raw response: {result.get('raw_response', {})}")
            logger.error(f"   üîë Current token (first 20): {api_token[:20]}...")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await send_telegram_notification(
                "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Web–∫assa - –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞",
                {
                    "–¢–∏–ø –æ—à–∏–±–∫–∏": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫ (Code 2)",
                    "–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω": f"{api_token[:20]}...{api_token[-10:]}",
                    "–û—à–∏–±–∫–∏ API": "; ".join(result.get('errors', [])),
                    "–ö–∞—Å—Å–∞": os.getenv('WEBKASSA_CASHBOX_ID'),
                    "–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞": json.dumps(webkassa_data, ensure_ascii=False, indent=2)[:400] + "..." if len(json.dumps(webkassa_data, ensure_ascii=False)) > 400 else json.dumps(webkassa_data, ensure_ascii=False, indent=2),
                    "–ü–æ–∑–∏—Ü–∏–∏": f"{len(webkassa_data.get('Positions', []))} —à—Ç.",
                    "–ü–ª–∞—Ç–µ–∂–∏": f"{len(webkassa_data.get('Payments', []))} —à—Ç.",
                    "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞": webkassa_data.get('CustomerPhone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    "–ù–æ–º–µ—Ä —á–µ–∫–∞": webkassa_data.get('ExternalCheckNumber', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    "–î–µ–π—Å—Ç–≤–∏–µ": "–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞"
                }
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á
            refreshed_key = await refresh_webkassa_api_key(db)
            
            if refreshed_key:
                logger.info("‚úÖ Successfully refreshed API key, retrying request...")
                logger.info(f"üîÑ Using token (first 20): {refreshed_key.api_key[:20]}...")
                logger.info(f"üîÑ Using token (last 20): ...{refreshed_key.api_key[-20:]}")
                logger.info(f"üîÑ Old token was: {api_token[:20]}...{api_token[-20:]}")
                logger.info(f"üîÑ Token changed: {refreshed_key.api_key != api_token}")
                
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π)
                retry_result = await send_to_webkassa(webkassa_data, refreshed_key.api_key, webhook_info)
                if retry_result["success"]:
                    logger.info("‚úÖ Request succeeded after key refresh")
                    
                    # –£—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    token_changed = refreshed_key.api_key != api_token
                    status_message = "API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω" if token_changed else "API –∫–ª—é—á –∞–∫—Ç—É–∞–ª–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω"
                    
                    await send_telegram_notification(
                        "‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π Web–∫assa —Ä–µ—à–µ–Ω–∞",
                        {
                            "–†–µ–∑—É–ª—å—Ç–∞—Ç": status_message,
                            "–¢–æ–∫–µ–Ω": f"{refreshed_key.api_key[:20]}...{refreshed_key.api_key[-10:]}",
                            "–ò–∑–º–µ–Ω–∏–ª—Å—è": "–î–∞" if token_changed else "–ù–µ—Ç",
                            "–°—Ç–∞—Ç—É—Å": "–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞"
                        }
                    )
                else:
                    logger.error("‚ùå Request failed even after key refresh")
                    logger.error(f"üîç Retry failure details: {retry_result}")
                    
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    await send_telegram_notification(
                        "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Web–∫assa –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞",
                        {
                            "–ü—Ä–æ–±–ª–µ–º–∞": "–ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª –¥–∞–∂–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º API –∫–ª—é—á–æ–º",
                            "–¢–æ–∫–µ–Ω": f"{refreshed_key.api_key[:20]}...{refreshed_key.api_key[-10:]}",
                            "–û—à–∏–±–∫–∏": "; ".join(retry_result.get('errors', [])),
                            "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Webkassa API"
                        }
                    )
                return retry_result
            else:
                logger.error("‚ùå Failed to refresh API key")
                logger.error(f"üîç Refresh failure details: refreshed_key={refreshed_key}")
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await send_telegram_notification(
                    "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á Web–∫assa",
                    {
                        "–ü—Ä–æ–±–ª–µ–º–∞": "–°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª",
                        "–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω": f"{api_token[:20]}...{api_token[-10:]}",
                        "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è": "–ù–µ—É–¥–∞—á–∞",
                        "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π"
                    }
                )
                return result
    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
    if not result["success"] and "errors" in result:
        # –ò—â–µ–º –æ—à–∏–±–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã (–∫–æ–¥ 11)
        shift_error_found = False
        for error_msg in result["errors"]:
            if "–∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É" in error_msg or "Code 11:" in error_msg:
                shift_error_found = True
                break
        
        if shift_error_found:
            logger.warning("‚ö†Ô∏è Shift close error detected - attempting to close shift...")
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å–º–µ–Ω—ã
            logger.error(f"üîç Shift close error details:")
            logger.error(f"   üìã Error messages: {result.get('errors', [])}")
            logger.error(f"   üìã Raw response: {result.get('raw_response', {})}")
            logger.error(f"   üì¶ Cashbox ID: {os.getenv('WEBKASSA_CASHBOX_ID')}")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ–± –æ—à–∏–±–∫–µ —Å–º–µ–Ω—ã
            await send_telegram_notification(
                "–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã Web–∫assa - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã",
                {
                    "–¢–∏–ø –æ—à–∏–±–∫–∏": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É (Code 11)",
                    "–ö–∞—Å—Å–∞": os.getenv('WEBKASSA_CASHBOX_ID'),
                    "–û—à–∏–±–∫–∏ API": "; ".join(result.get('errors', [])),
                    "–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞": json.dumps(webkassa_data, ensure_ascii=False, indent=2)[:400] + "..." if len(json.dumps(webkassa_data, ensure_ascii=False)) > 400 else json.dumps(webkassa_data, ensure_ascii=False, indent=2),
                    "–ü–æ–∑–∏—Ü–∏–∏": f"{len(webkassa_data.get('Positions', []))} —à—Ç.",
                    "–ü–ª–∞—Ç–µ–∂–∏": f"{len(webkassa_data.get('Payments', []))} —à—Ç.",
                    "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞": webkassa_data.get('CustomerPhone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    "–ù–æ–º–µ—Ä —á–µ–∫–∞": webkassa_data.get('ExternalCheckNumber', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    "–¢–æ–∫–µ–Ω": f"{api_token[:20]}...{api_token[-10:]}",
                    "–î–µ–π—Å—Ç–≤–∏–µ": "–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã"
                }
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É
            closed_shift = await close_webkassa_shift(db, api_token, webhook_info)
            
            if closed_shift["success"]:
                logger.info("‚úÖ Successfully closed shift, retrying original request...")
                
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
                retry_result = await send_to_webkassa(webkassa_data, api_token, webhook_info)
                if retry_result["success"]:
                    logger.info("‚úÖ Request succeeded after shift close")
                    
                    # –£—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await send_telegram_notification(
                        "‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å–º–µ–Ω–æ–π Web–∫assa —Ä–µ—à–µ–Ω–∞",
                        {
                            "–†–µ–∑—É–ª—å—Ç–∞—Ç": "–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞",
                            "–ö–∞—Å—Å–∞": os.getenv('WEBKASSA_CASHBOX_ID'),
                            "–°—Ç–∞—Ç—É—Å": "–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã"
                        }
                    )
                else:
                    logger.error("‚ùå Request failed even after shift close")
                    logger.error(f"üîç Retry after shift close failure: {retry_result}")
                    
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
                    await send_telegram_notification(
                        "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Web–∫assa –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã",
                        {
                            "–ü—Ä–æ–±–ª–µ–º–∞": "–ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª –¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã",
                            "–ö–∞—Å—Å–∞": os.getenv('WEBKASSA_CASHBOX_ID'),
                            "–û—à–∏–±–∫–∏": "; ".join(retry_result.get('errors', [])),
                            "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Å—Å—ã"
                        }
                    )
                return retry_result
            else:
                logger.error("‚ùå Failed to close shift")
                logger.error(f"üîç Shift close failure details: {closed_shift}")
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
                await send_telegram_notification(
                    "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É Web–∫assa",
                    {
                        "–ü—Ä–æ–±–ª–µ–º–∞": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ",
                        "–ö–∞—Å—Å–∞": os.getenv('WEBKASSA_CASHBOX_ID'),
                        "–û—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è": "; ".join(closed_shift.get('errors', [])),
                        "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Web–∫assa"
                    }
                )
                return result
    
    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞ –∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É—Å–ø–µ—à–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É
    if not result["success"]:
        logger.error(f"üîç General Web–∫assa error details:")
        logger.error(f"   üìã Success: {result.get('success')}")
        logger.error(f"   üìã Error: {result.get('error')}")
        logger.error(f"   üìã Errors: {result.get('errors', [])}")
        logger.error(f"   üìã Raw response: {result.get('raw_response', {})}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
        await send_telegram_notification(
            "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Web–∫assa API",
            {
                "–¢–∏–ø": "–û–±—â–∞—è –æ—à–∏–±–∫–∞ API",
                "–û—à–∏–±–∫–∞": result.get('error', 'Unknown'),
                "–û—à–∏–±–∫–∏ API": "; ".join(result.get('errors', [])),
                "–ö–∞—Å—Å–∞": os.getenv('WEBKASSA_CASHBOX_ID'),
                "–¢–æ–∫–µ–Ω": f"{api_token[:20]}...{api_token[-10:]}",
                "–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞": json.dumps(webkassa_data, ensure_ascii=False, indent=2)[:500] + "..." if len(json.dumps(webkassa_data, ensure_ascii=False)) > 500 else json.dumps(webkassa_data, ensure_ascii=False, indent=2),
                "–ü–æ–∑–∏—Ü–∏–∏": f"{len(webkassa_data.get('Positions', []))} —à—Ç.",
                "–ü–ª–∞—Ç–µ–∂–∏": f"{len(webkassa_data.get('Payments', []))} —à—Ç.",
                "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞": webkassa_data.get('CustomerPhone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                "–ù–æ–º–µ—Ä —á–µ–∫–∞": webkassa_data.get('ExternalCheckNumber', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"
            }
        )
    
    return result


async def send_to_webkassa(data: dict, api_token: str, webhook_info: dict = None) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ API Webkassa.
    
    Args:
        data: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Webkassa
        api_token: API —Ç–æ–∫–µ–Ω
        webhook_info: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    """
    webkassa_api_url = os.getenv("WEBKASSA_API_URL", "https://api.webkassa.kz")
    
    # –û–¢–õ–ê–î–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info(f"üîç WEBKASSA_API_URL from env: '{webkassa_api_url}'")
    logger.info(f"üîç All WEBKASSA env vars: {[k for k in os.environ.keys() if 'WEBKASSA' in k]}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞
    endpoint_url = f"{webkassa_api_url.rstrip('/')}/api/Check"
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Webkassa API
    headers = {
        "Content-Type": "application/json",
        "X-API-KEY": "WKD-68D0CA3C-191F-4DBB-B280-D483724EA7A9"  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª—é—á
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º Token –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    request_data = {
        "Token": api_token,  # –¢–æ–∫–µ–Ω –∏–¥–µ—Ç –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        **data  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    }

    logger.info(f"üåê Sending to Webkassa API: {endpoint_url}")
    logger.info(f"üîë Using API token in body: {api_token[:20]}...")
    logger.info(f"üìã Request headers: {headers}")
    logger.info(f"üìã Request data: {json.dumps(request_data, ensure_ascii=False, indent=2)}")

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(endpoint_url, json=request_data, headers=headers, timeout=30)
            response_data = response.json()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º Unicode
            formatted_response = format_api_response(response_data)
            logger.info(f"üì§ Webkassa API response received:")
            logger.info(f"üéØ Response: {formatted_response}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏—Ö
            if "Errors" in response_data and response_data["Errors"]:
                error_messages = []
                for error in response_data["Errors"]:
                    error_text = error.get("Text", "")
                    decoded_error = decode_unicode_escapes(error_text)
                    error_code = error.get("Code", "")
                    error_messages.append(f"Code {error_code}: {decoded_error}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ webhook
                error_log_message = f"‚ùå Webkassa API errors: {'; '.join(error_messages)}"
                if webhook_info:
                    error_log_message += f" | Webhook Details: resource_id={webhook_info.get('resource_id')}, company_id={webhook_info.get('company_id')}, client={webhook_info.get('client_name', 'Unknown')}, phone={webhook_info.get('client_phone', 'Unknown')}, comment='{webhook_info.get('comment', '')}'"
                    # –¢–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π webhook –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    logger.error(f"üîç Full webhook data for error analysis: {json.dumps(webhook_info.get('full_webhook', {}), ensure_ascii=False, indent=2)}")
                
                logger.error(error_log_message)
                return {"success": False, "errors": error_messages, "raw_response": response_data}
            
            response.raise_for_status()
            return {"success": True, "data": response_data}
            
    except httpx.RequestError as e:
        error_message = f"Webkassa API request failed: {e}"
        if webhook_info:
            error_message += f" | Webhook Details: resource_id={webhook_info.get('resource_id')}, company_id={webhook_info.get('company_id')}, client={webhook_info.get('client_name', 'Unknown')}, phone={webhook_info.get('client_phone', 'Unknown')}"
            logger.error(f"üîç Full webhook data for network error: {json.dumps(webhook_info.get('full_webhook', {}), ensure_ascii=False, indent=2)}")
        logger.error(error_message)
        return {"success": False, "error": f"Network error: {e}"}
    except httpx.HTTPStatusError as e:
        error_text = e.response.text
        decoded_error = decode_unicode_escapes(error_text)
        error_message = f"Webkassa API returned error status {e.response.status_code}: {decoded_error}"
        if webhook_info:
            error_message += f" | Webhook Details: resource_id={webhook_info.get('resource_id')}, company_id={webhook_info.get('company_id')}, client={webhook_info.get('client_name', 'Unknown')}, phone={webhook_info.get('client_phone', 'Unknown')}"
            logger.error(f"üîç Full webhook data for HTTP error: {json.dumps(webhook_info.get('full_webhook', {}), ensure_ascii=False, indent=2)}")
        logger.error(error_message)
        return {"success": False, "error": f"API error: {decoded_error}"}
    except Exception as e:
        error_message = f"Unexpected error during Webkassa API call: {e}"
        if webhook_info:
            error_message += f" | Webhook Details: resource_id={webhook_info.get('resource_id')}, company_id={webhook_info.get('company_id')}, client={webhook_info.get('client_name', 'Unknown')}, phone={webhook_info.get('client_phone', 'Unknown')}"
            logger.error(f"üîç Full webhook data for unexpected error: {json.dumps(webhook_info.get('full_webhook', {}), ensure_ascii=False, indent=2)}")
        logger.error(error_message)
        return {"success": False, "error": f"Unexpected error: {e}"}


@router.post("/webhook", response_model=WebhookResponse)
async def handle_altegio_webhook(
    request: Request,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Altegio —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        body = await request.body()
        body_text = body.decode('utf-8') if body else ""
        
        logger.info(f"üéØ Received webhook data: {body_text[:500]}...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            raw_data = json.loads(body_text) if body_text else {}
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Invalid JSON received: {e}")
            return WebhookResponse(
                success=False,
                message="Invalid JSON format",
                processed_count=0
            )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é Pydantic
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–º webhook
            if isinstance(raw_data, list):
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
                webhook_list = []
                for item in raw_data:
                    try:
                        payload = AltegioWebhookPayload(**item)
                        webhook_list.append(payload)
                    except Exception as validation_error:
                        logger.warning(f"‚ö†Ô∏è Failed to validate webhook item, skipping: {validation_error}")
                        continue
            else:
                # –û–¥–∏–Ω–æ—á–Ω—ã–π webhook
                payload = AltegioWebhookPayload(**raw_data)
                webhook_list = [payload]
                
        except Exception as validation_error:
            logger.warning(f"‚ö†Ô∏è Pydantic validation failed, trying flexible parsing: {validation_error}")
            
            # –°–æ–∑–¥–∞–µ–º webhook —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
            try:
                if isinstance(raw_data, list):
                    webhook_list = []
                    for item in raw_data:
                        flexible_webhook = create_flexible_webhook(item)
                        if flexible_webhook:
                            webhook_list.append(flexible_webhook)
                else:
                    flexible_webhook = create_flexible_webhook(raw_data)
                    webhook_list = [flexible_webhook] if flexible_webhook else []
                    
                if not webhook_list:
                    logger.error(f"‚ùå Could not parse webhook data: {validation_error}")
                    return WebhookResponse(
                        success=False,
                        message=f"Webhook validation failed: {str(validation_error)}",
                        processed_count=0
                    )
                    
            except Exception as e:
                logger.error(f"‚ùå Flexible parsing also failed: {e}")
                return WebhookResponse(
                    success=False,
                    message=f"Complete parsing failed: {str(e)}",
                    processed_count=0
                )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º worker –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω
        # ensure_queue_worker_running()
        
        logger.info(f"üéØ Successfully parsed {len(webhook_list)} webhook(s), adding to processing queue")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ webhook –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        tasks = []
        results = []
        for single_payload in webhook_list:
            task = WebhookTask(single_payload, request, db)
            tasks.append(task)
            result = await task.run()
            logger.info(f"üì§ Webhook {task.task_id} processed immediately")
            results.append(result)
        
        # ...existing code...
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_success = sum(1 for r in results if r.get("success", False))
        total_processed = sum(r.get("processed_count", 0) for r in results)
        
        if total_success > 0:
            return WebhookResponse(
                success=True,
                message=f"Successfully processed {total_success} of {len(webhook_list)} webhook(s) via queue",
                processed_count=total_processed
            )
        else:
            return WebhookResponse(
                success=False,
                message=f"Failed to process {len(webhook_list)} webhook(s)",
                processed_count=0
            )
            
    except Exception as e:
        logger.error(f"‚ùå Critical error in webhook handler: {e}", exc_info=True)
        return WebhookResponse(
            success=False,
            message=f"Critical error: {str(e)}",
            processed_count=0
        )


def create_flexible_webhook(raw_data: dict) -> Optional[AltegioWebhookPayload]:
    """
    –°–æ–∑–¥–∞–µ—Ç webhook —Å –≥–∏–±–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö, –∑–∞–º–µ–Ω—è—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    try:
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not all(key in raw_data for key in ['company_id', 'resource', 'resource_id', 'status']):
            logger.error(f"‚ùå Missing required fields in webhook data: {raw_data.keys()}")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        safe_data = raw_data.get('data', {})
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å ID
        if 'id' not in safe_data:
            safe_data['id'] = raw_data.get('resource_id', 0)

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ prepaid, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ
        if 'prepaid' in safe_data:
            val = safe_data['prepaid']
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ bool, —Å—Ç–∞–≤–∏–º False
            if isinstance(val, str) and val not in ['true', 'false', '1', '0', 'True', 'False']:
                safe_data['prepaid'] = False
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ bool –∏ –Ω–µ int, —Ç–æ–∂–µ —Å—Ç–∞–≤–∏–º False
            elif not isinstance(val, (bool, int)):
                safe_data['prepaid'] = False

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º custom_fields
        if 'custom_fields' in safe_data:
            if isinstance(safe_data['custom_fields'], dict):
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                pass
            elif not isinstance(safe_data['custom_fields'], list):
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ø–∏—Å–æ–∫ –∏ –Ω–µ –æ–±—ä–µ–∫—Ç, –¥–µ–ª–∞–µ–º –ø—É—Å—Ç—ã–º –æ–±—ä–µ–∫—Ç–æ–º
                safe_data['custom_fields'] = {}
        else:
            safe_data['custom_fields'] = {}
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
        for list_field in ['services', 'goods_transactions', 'documents', 'client_tags', 'record_labels', 'composite', 'service', 'supplier']:
            if list_field not in safe_data:
                safe_data[list_field] = []
        
        # –°–æ–∑–¥–∞–µ–º webhook —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        webhook_data = {
            'company_id': raw_data['company_id'],
            'resource': raw_data['resource'],
            'resource_id': raw_data['resource_id'],
            'status': raw_data['status'],
            'data': safe_data
        }
        
        return AltegioWebhookPayload(**webhook_data)
        
    except Exception as e:
        logger.error(f"‚ùå Failed to create flexible webhook: {e}")
        return None


async def process_webhook_internal(
    payload: AltegioWebhookPayload,
    request: Request,
    db: AsyncSession
) -> dict:
    """
    –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ webhook
    """
    try:
        logger.info(f"Processing webhook: company_id={payload.company_id}, "
                   f"resource={payload.resource}, resource_id={payload.resource_id}, "
                   f"status={payload.status}")
        
        if not await verify_webhook_signature(request):
            logger.warning("Invalid webhook signature")
            raise HTTPException(status_code=401, detail="Invalid webhook signature")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        comment_text = payload.data.comment or ""
        has_fch = '—Ñ—á' in comment_text.lower() if comment_text else False
        
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ webhook
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 'record' –∏ 'goods_operations_sale' —Ç–∏–ø—ã
        if payload.resource == 'record':
            # –û–±—ã—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–±—É—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å '—Ñ—á' –∏ –ø–æ–ª–Ω—É—é –æ–ø–ª–∞—Ç—É
            conditions_met = (
                payload.data.comment and has_fch and 
                payload.data.paid_full == 1
            )
        elif payload.resource == 'goods_operations_sale':
            # –ü—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Ç–æ–∂–µ —Ç—Ä–µ–±—É—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å '—Ñ—á'
            conditions_met = (
                payload.data.comment and has_fch
            )
        else:
            # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø webhook - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            logger.info(f"üö´ Unsupported resource type '{payload.resource}' for webhook {payload.resource_id}, ignoring...")
            return {
                "success": True,
                "message": f"Webhook {payload.resource_id} ignored - unsupported resource type '{payload.resource}'",
                "processed_count": 0
            }
        
        logger.info(f"ÔøΩ Checking processing conditions for webhook {payload.resource_id}:")
        logger.info(f"   üìã Resource: {payload.resource} (supported: 'record', 'goods_operations_sale') {'‚úÖ' if payload.resource in ['record', 'goods_operations_sale'] else '‚ùå'}")
        logger.info(f"   üí¨ Comment: '{comment_text}' (must contain '—Ñ—á') {'‚úÖ' if has_fch else '‚ùå'}")
        logger.info(f"   ÔøΩÔ∏è Goods sale: requires '—Ñ—á' comment {'‚úÖ' if has_fch else '‚ùå'}")
        
        if payload.resource == 'record':
            logger.info(f"   üí∞ Paid full: {payload.data.paid_full} (required: 1) {'‚úÖ' if payload.data.paid_full == 1 else '‚ùå'}")
        elif payload.resource == 'goods_operations_sale':
            logger.info(f"   ÔøΩÔ∏è Goods sale: requires '—Ñ—á' comment {'‚úÖ' if has_fch else '‚ùå'}")
        
        logger.info(f"   üéØ Overall result: {'‚úÖ PROCESSING' if conditions_met else '‚ùå SKIPPING'}")
        
        if not conditions_met:
            logger.info(f"Webhook {payload.resource_id} does not meet the required conditions for processing.")
            return {
                "success": True,
                "message": f"Webhook {payload.resource_id} skipped due to conditions",
                "processed_count": 0
            }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        existing_record = await db.execute(
            select(WebhookRecord).filter(
                WebhookRecord.resource_id == payload.resource_id,
                WebhookRecord.company_id == payload.company_id,
                WebhookRecord.processed == True
            )
        )
        if existing_record.scalars().first():
            logger.info(f"‚úÖ Webhook with resource_id {payload.resource_id} already successfully processed, skipping.")
            return {
                "success": True,
                "message": f"Webhook {payload.resource_id} already processed",
                "processed_count": 0
            }

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        webhook_record = await db.execute(
            select(WebhookRecord).filter(
                WebhookRecord.resource_id == payload.resource_id,
                WebhookRecord.company_id == payload.company_id
            )
        )
        webhook_record = webhook_record.scalars().first()

        if webhook_record:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            logger.info(f"üîÑ Found existing webhook record (ID: {webhook_record.id}), updating for retry...")
            webhook_record.status = payload.status
            client_phone, client_name = get_client_data(payload.data.client)
            webhook_record.client_phone = client_phone
            webhook_record.client_name = client_name
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º datetime
            if payload.data.datetime:
                webhook_record.record_date = datetime.fromisoformat(payload.data.datetime.replace(" ", "T").split("+")[0])
            elif payload.data.create_date:
                webhook_record.record_date = datetime.fromisoformat(payload.data.create_date.replace(" ", "T").split("+")[0])
            else:
                webhook_record.record_date = datetime.utcnow()
            webhook_record.services_data = json.dumps([s.model_dump() for s in payload.data.services])
            webhook_record.comment = payload.data.comment
            webhook_record.raw_data = payload.model_dump()
            webhook_record.updated_at = datetime.utcnow()
            webhook_record.processed = False
            webhook_record.processing_error = None
            webhook_record.webkassa_status = None
            webhook_record.webkassa_response = None
            webhook_record.webkassa_request_id = None
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            logger.info(f"üìù Creating new webhook record for resource_id {payload.resource_id}")
            record_date = datetime.utcnow()
            if payload.data.datetime:
                try:
                    record_date = datetime.fromisoformat(payload.data.datetime.replace(" ", "T").split("+")[0])
                except (ValueError, AttributeError) as e:
                    logger.warning(f"Failed to parse datetime '{payload.data.datetime}': {e}, using current time")
            elif payload.data.create_date:
                try:
                    record_date = datetime.fromisoformat(payload.data.create_date.replace(" ", "T").split("+")[0])
                except (ValueError, AttributeError) as e:
                    logger.warning(f"Failed to parse create_date '{payload.data.create_date}': {e}, using current time")
            
            client_phone, client_name = get_client_data(payload.data.client)
            webhook_record = WebhookRecord(
                company_id=payload.company_id,
                resource=payload.resource,
                resource_id=payload.resource_id,
                status=payload.status,
                client_phone=client_phone,
                client_name=client_name,
                record_date=record_date,
                services_data=json.dumps([s.model_dump() for s in payload.data.services]),
                comment=payload.data.comment,
                raw_data=payload.model_dump()
            )
            db.add(webhook_record)
        
        await db.commit()
        await db.refresh(webhook_record)
        
        logger.info(f"Webhook saved/updated in database with ID: {webhook_record.id}")
        
        # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—é
        try:
            # –ü–æ–ª—É—á–∞–µ–º document_id
            altegio_document_id = None
            if payload.resource == "goods_operations_sale":
                altegio_document_id = payload.data.document_id
            else:
                if payload.data.documents:
                    altegio_document_id = payload.data.documents[0].id
            
            if not altegio_document_id:
                logger.warning(f"No document ID found in webhook for resource_id {payload.resource_id}")
                webhook_record.processing_error = "No document ID found in webhook"
                webhook_record.processed = False
                await db.commit()
                return {
                    "success": False,
                    "message": f"No document ID found for webhook {payload.resource_id}",
                    "processed_count": 0
                }

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç Altegio
            altegio_document = None
            try:
                logger.info(f"Requesting Altegio document: company_id={payload.company_id}, document_id={altegio_document_id}, resource={payload.resource}")
                
                if payload.resource == "goods_operations_sale":
                    logger.info(f"üõçÔ∏è Using goods sale document API for resource_id {payload.resource_id}")
                    altegio_document = await get_altegio_sale_document(payload.company_id, altegio_document_id)
                else:
                    logger.info(f"üìã Using transactions document API for resource_id {payload.resource_id}")
                    altegio_document = await get_altegio_document(payload.company_id, altegio_document_id)
                
                logger.info(f"‚úÖ Successfully fetched Altegio document for resource_id {payload.resource_id}")
            except HTTPException as altegio_error:
                logger.warning(f"‚ùå Failed to fetch Altegio document for resource_id {payload.resource_id}: {altegio_error.detail}")
                altegio_document = {"data": []}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            has_data = False
            if isinstance(altegio_document, dict):
                has_data = bool(altegio_document.get("data"))
            elif isinstance(altegio_document, list):
                has_data = bool(altegio_document)
            else:
                has_data = False
                
            if not has_data:
                logger.warning(f"No data found in Altegio document for resource_id {payload.resource_id}")
                webhook_record.processing_error = "No data found in Altegio document"
                webhook_record.processed = False
                await db.commit()
                return {
                    "success": False,
                    "message": f"No data in Altegio document for webhook {payload.resource_id}",
                    "processed_count": 0
                }

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Webkassa
            if payload.resource == "goods_operations_sale":
                webkassa_data = await prepare_webkassa_data_for_goods_sale(payload, altegio_document, db)
            else:
                webkassa_data = await prepare_webkassa_data(payload, altegio_document, db)
            
            logger.info(f"üí∞ Prepared Webkassa fiscalization data for {payload.resource_id}")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            client_phone, client_name = get_client_data(payload.data.client)
            webhook_info = {
                "resource_id": payload.resource_id,
                "company_id": payload.company_id,
                "client_name": client_name if client_name else "Unknown",
                "client_phone": client_phone if client_phone else "Unknown",
                "record_date": payload.data.datetime if payload.data.datetime else (payload.data.create_date if payload.data.create_date else "Unknown"),
                "comment": payload.data.comment,
                "status": payload.status,
                "resource": payload.resource,
                "full_webhook": payload.model_dump()
            }

            webkassa_response = await send_to_webkassa_with_auto_refresh(db, webkassa_data, webhook_info)
            
            is_success = webkassa_response.get("success", False)
            if is_success:
                logger.info(f"‚úÖ SUCCESS: Webkassa fiscalization completed for {payload.resource_id}")
                webhook_record.processed = True
                webhook_record.processed_at = datetime.utcnow()
                webhook_record.webkassa_status = "success"
                webhook_record.processing_error = None
                processed_count = 1
            else:
                logger.info(f"‚ùå FAILED: Webkassa fiscalization failed for {payload.resource_id}")
                webhook_record.processed = False
                webhook_record.processed_at = None
                webhook_record.webkassa_status = "failed"
                
                error_details = []
                if "errors" in webkassa_response:
                    error_details.extend(webkassa_response["errors"])
                if "error" in webkassa_response:
                    error_details.append(webkassa_response["error"])
                webhook_record.processing_error = "; ".join(error_details) if error_details else "Unknown Webkassa error"
                processed_count = 0

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            webhook_record.webkassa_response = json.dumps(webkassa_response)
            external_check_number = webkassa_data.get("ExternalCheckNumber")
            webhook_record.webkassa_request_id = str(external_check_number) if external_check_number is not None else None
            await db.commit()
            
            return {
                "success": is_success,
                "message": f"Webhook {payload.resource_id} processed {'successfully' if is_success else 'with errors'}",
                "processed_count": processed_count,
                "record_id": webhook_record.id
            }
            
        except Exception as e:
            logger.error(f"Error processing webhook {payload.resource_id}: {str(e)}", exc_info=True)
            webhook_record.processing_error = str(e)
            webhook_record.processed = False
            await db.commit()
            return {
                "success": False,
                "message": f"Processing error for webhook {payload.resource_id}: {str(e)}",
                "processed_count": 0
            }
        
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"Critical error in webhook processing: {str(e)}", exc_info=True)
        return {
            "success": False,
            "message": f"Critical processing error: {str(e)}",
            "processed_count": 0
        }


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def send_telegram_notification(message: str, error_details: dict = None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    """
    bot_token = "7922422379:AAEjk9PZuF8HgHNK3UoVDn-RIMXZhCfKewk"
    chat_id = os.getenv("TELEGRAM_CHAT_ID", "1125559425")  # ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    telegram_message = f"üö® –û–®–ò–ë–ö–ê WEBKASSA\n\n"
    telegram_message += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
    telegram_message += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n\n"
    
    if error_details:
        telegram_message += "üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n"
        for key, value in error_details.items():
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            if isinstance(value, str) and len(value) > 400:
                value = value[:400] + "..."
            telegram_message += f"‚Ä¢ {key}: {value}\n"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(telegram_message) > 4000:
        telegram_message = telegram_message[:4000] + "\n\n[–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ]"
    
    try:
        telegram_api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        payload = {
            "chat_id": chat_id,
            "text": telegram_message,
            "parse_mode": "HTML"
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(telegram_api_url, json=payload, timeout=10)
            
            if response.status_code == 200:
                logger.info("‚úÖ Telegram notification sent successfully")
                return True
            else:
                logger.error(f"‚ùå Failed to send Telegram notification: {response.status_code} - {response.text}")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå Error sending Telegram notification: {e}")
        return False


@router.post("/webhook/test")
async def test_webhook_endpoint(request: Request):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è webhook –æ—Ç Altegio
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = dict(request.headers)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        body_text = body.decode('utf-8') if body else ""
        
        # –ü–æ–ª—É—á–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        query_params = dict(request.query_params)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info("=" * 50)
        logger.info("üß™ TEST WEBHOOK RECEIVED")
        logger.info("=" * 50)
        logger.info(f"üìç Method: {request.method}")
        logger.info(f"üìç URL: {request.url}")
        logger.info(f"üìç Client IP: {request.client.host if request.client else 'Unknown'}")
        logger.info(f"üìã Headers:")
        for key, value in headers.items():
            logger.info(f"   {key}: {value}")
        logger.info(f"üîç Query params: {query_params}")
        logger.info(f"üì¶ Body size: {len(body)} bytes")
        logger.info(f"üì¶ Body content: {body_text[:1000]}{'...' if len(body_text) > 1000 else ''}")
        logger.info("=" * 50)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            if body_text:
                import json
                parsed_json = json.loads(body_text)
                logger.info(f"‚úÖ JSON parsed successfully:")
                logger.info(f"üìã JSON content: {json.dumps(parsed_json, ensure_ascii=False, indent=2)}")
        except json.JSONDecodeError:
            logger.info("‚ö†Ô∏è Body is not valid JSON")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        await send_telegram_notification(
            "üß™ –¢–µ—Å—Ç–æ–≤—ã–π webhook –ø–æ–ª—É—á–µ–Ω",
            {
                "URL": str(request.url),
                "Method": request.method,
                "IP": request.client.host if request.client else 'Unknown',
                "Headers": str(headers),
                "Body size": f"{len(body)} bytes",
                "Body preview": body_text[:500] + "..." if len(body_text) > 500 else body_text
            }
        )
        
        return {
            "success": True,
            "message": "Test webhook received successfully",
            "received_data": {
                "method": request.method,
                "headers": headers,
                "query_params": query_params,
                "body_size": len(body),
                "body_preview": body_text[:200] + "..." if len(body_text) > 200 else body_text
            }
        }
        
    except Exception as e:
        logger.error(f"Error in test webhook: {e}", exc_info=True)
        return {
            "success": False,
            "error": str(e)
        }


@router.post("/webhook/refresh-api-key")
async def manual_refresh_api_key(db: AsyncSession = Depends(get_db_session)):
    """
    –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ Webkassa —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç
    """
    try:
        logger.info("üîÑ Manual API key refresh requested")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á
        current_key = await get_webkassa_api_key(db)
        if current_key:
            logger.info(f"üìã Current key found: ID {current_key.id}, updated {current_key.updated_at}")
        else:
            logger.info("üìã No current key found in database")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á
        refreshed_key = await refresh_webkassa_api_key(db)
        
        if refreshed_key:
            logger.info("‚úÖ Manual API key refresh successful")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            await send_telegram_notification(
                "‚úÖ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ Webkassa –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
                {
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç": "–£—Å–ø–µ—Ö",
                    "–ù–æ–≤—ã–π –∫–ª—é—á ID": str(refreshed_key.id),
                    "–û–±–Ω–æ–≤–ª–µ–Ω": str(refreshed_key.updated_at),
                    "–¢–æ–∫–µ–Ω": f"{refreshed_key.user_id[:20]}...{refreshed_key.user_id[-10:]}",
                    "API –∫–ª—é—á": f"{refreshed_key.api_key[:20]}...{refreshed_key.api_key[-10:]}"
                }
            )
            
            return {
                "success": True,
                "message": "API key refreshed successfully",
                "key_info": {
                    "id": refreshed_key.id,
                    "service_name": refreshed_key.service_name,
                    "updated_at": refreshed_key.updated_at.isoformat(),
                    "token_preview": f"{refreshed_key.user_id[:20]}...{refreshed_key.user_id[-10:]}",
                    "api_key_preview": f"{refreshed_key.api_key[:20]}...{refreshed_key.api_key[-10:]}"
                }
            }
        else:
            logger.error("‚ùå Manual API key refresh failed")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ
            await send_telegram_notification(
                "‚ùå –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ Webkassa –Ω–µ —É–¥–∞–ª–æ—Å—å",
                {

                    "–†–µ–∑—É–ª—å—Ç–∞—Ç": "–ù–µ—É–¥–∞—á–∞",
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API"
                }
            )
            
            return {
                "success": False,
                "message": "Failed to refresh API key",
                "error": "API key refresh script failed"
            }
            
    except Exception as e:
        logger.error(f"‚ùå Error in manual API key refresh: {e}", exc_info=True)
        
        await send_telegram_notification(
            "üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞ Web–∫assa",
            {
                "–û—à–∏–±–∫–∞": str(e),
                "–¢–∏–ø": type(e).__name__,
                "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
            }
        )
        
        return {
            "success": False,
            "message": "Internal server error during API key refresh",
            "error": str(e)
        }


@router.delete("/webhook/record/{record_id}")
async def delete_webhook_record(
    record_id: int,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é webhook –∑–∞–ø–∏—Å—å –ø–æ ID
    """
    try:
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å
        webhook_record = await db.execute(
            select(WebhookRecord).filter(WebhookRecord.id == record_id)
        )
        webhook_record = webhook_record.scalars().first()

        if not webhook_record:
            raise HTTPException(status_code=404, detail="Webhook record not found")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        resource_id = webhook_record.resource_id
        company_id = webhook_record.company_id
        processed = webhook_record.processed
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        await db.delete(webhook_record)
        await db.commit()
        
        logger.info(f"üóëÔ∏è Deleted webhook record: ID={record_id}, resource_id={resource_id}, processed={processed}")
        
        return {
            "success": True,
            "message": f"Webhook record {record_id} deleted successfully",
            "deleted_record": {
                "id": record_id,
                "resource_id": resource_id,
                "company_id": company_id,
                "was_processed": processed
            }
        }
        
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"Error deleting webhook record {record_id}: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")


@router.delete("/webhook/resource/{resource_id}")
async def delete_webhook_by_resource_id(
    resource_id: int,
    company_id: Optional[int] = None,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ webhook –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ resource_id
    –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å company_id –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    """
    try:
        # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å
        query = select(WebhookRecord).filter(WebhookRecord.resource_id == resource_id)
        if company_id:
            query = query.filter(WebhookRecord.company_id == company_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        result = await db.execute(query)
        records_to_delete = result.scalars().all()
        
        if not records_to_delete:
            message = f"No webhook records found for resource_id {resource_id}"
            if company_id:
                message += f" and company_id {company_id}"
            raise HTTPException(status_code=404, detail=message)
        
        deleted_info = []
        for record in records_to_delete:
            deleted_info.append({
                "id": record.id,
                "resource_id": record.resource_id,
                "company_id": record.company_id,
                "was_processed": record.processed,
                "webkassa_status": record.webkassa_status
            })
            await db.delete(record)
        
        await db.commit()
        
        logger.info(f"üóëÔ∏è Deleted {len(deleted_info)} webhook records for resource_id {resource_id}")
        for info in deleted_info:
            logger.info(f"   - ID: {info['id']}, processed: {info['was_processed']}, status: {info['webkassa_status']}")
        
        return {
            "success": True,
            "message": f"Deleted {len(deleted_info)} webhook records for resource_id {resource_id}",
            "deleted_count": len(deleted_info),
            "deleted_records": deleted_info
        }
        
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"Error deleting webhook records for resource_id {resource_id}: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")


@router.delete("/webhook/failed")
async def delete_failed_webhook_records(
    confirm: bool = False,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ webhook –∑–∞–ø–∏—Å–∏ (processed=False)
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - confirm: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å True)
    """
    if not confirm:
        raise HTTPException(
            status_code=400, 
            detail="This operation requires confirmation. Add ?confirm=true to the request"
        )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        result = await db.execute(
            select(WebhookRecord).filter(WebhookRecord.processed == False)
        )
        failed_records = result.scalars().all()
        
        if not failed_records:
            return {
                "success": True,
                "message": "No failed webhook records found to delete",
                "deleted_count": 0
            }
        
        deleted_info = []
        for record in failed_records:
            deleted_info.append({
                "id": record.id,
                "resource_id": record.resource_id,
                "company_id": record.company_id,
                "webkassa_status": record.webkassa_status,
                "processing_error": record.processing_error
            })
            await db.delete(record)
        
        await db.commit()
        
        logger.info(f"üóëÔ∏è Deleted {len(deleted_info)} failed webhook records")
        for info in deleted_info[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ª–æ–≥–æ–≤
            logger.info(f"   - ID: {info['id']}, resource_id: {info['resource_id']}, error: {info['processing_error'][:100] if info['processing_error'] else 'None'}")
        if len(deleted_info) > 5:
            logger.info(f"   ... –∏ –µ—â–µ {len(deleted_info) - 5} –∑–∞–ø–∏—Å–µ–π")
        
        return {
            "success": True,
            "message": f"Deleted {len(deleted_info)} failed webhook records",
            "deleted_count": len(deleted_info),
            "deleted_records": deleted_info
        }
        
    except Exception as e:
        logger.error(f"Error deleting failed webhook records: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")


@router.get("/webhook/records")
async def list_webhook_records(
    limit: int = 50,
    offset: int = 0,
    processed: Optional[bool] = None,
    webkassa_status: Optional[str] = None,
    resource_id: Optional[int] = None,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ webhook –∑–∞–ø–∏—Å–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
    - offset: —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
    - processed: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ (True/False)
    - webkassa_status: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É Webkassa (success/failed)
    - resource_id: —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É resource_id
    """
    try:
        # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        query = select(WebhookRecord)
        
        if processed is not None:
            query = query.filter(WebhookRecord.processed == processed)
        
        if webkassa_status:
            query = query.filter(WebhookRecord.webkassa_status == webkassa_status)
            
        if resource_id:
            query = query.filter(WebhookRecord.resource_id == resource_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        query = query.order_by(WebhookRecord.created_at.desc()).offset(offset).limit(limit)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = await db.execute(query)
        records = result.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        count_query = select(WebhookRecord)
        if processed is not None:
            count_query = count_query.filter(WebhookRecord.processed == processed)
        if webkassa_status:
            count_query = count_query.filter(WebhookRecord.webkassa_status == webkassa_status)
        if resource_id:
            count_query = count_query.filter(WebhookRecord.resource_id == resource_id)
            
        count_result = await db.execute(count_query)
        total_count = len(count_result.scalars().all())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        records_data = []
        for record in records:
            records_data.append({
                "id": record.id,
                "resource_id": record.resource_id,
                "company_id": record.company_id,
                "resource": record.resource,
                "status": record.status,
                "client_phone": record.client_phone,
                "client_name": record.client_name,
                "processed": record.processed,
                "webkassa_status": record.webkassa_status,
                "processing_error": record.processing_error,
                "created_at": record.created_at.isoformat() if record.created_at else None,
                "processed_at": record.processed_at.isoformat() if record.processed_at else None,
                "comment": record.comment
            })
        
        return {
            "success": True,
            "records": records_data,
            "pagination": {
                "limit": limit,
                "offset": offset,
                "total_count": total_count,
                "returned_count": len(records_data)
            },
            "filters": {
                "processed": processed,
                "webkassa_status": webkassa_status,
                "resource_id": resource_id
            }
        }
        
    except Exception as e:
        logger.error(f"Error listing webhook records: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")


@router.get("/webhook/stats")
async def get_webhook_stats(db: AsyncSession = Depends(get_db_session)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ webhook –∑–∞–ø–∏—Å—è–º
    """
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        total_result = await db.execute(select(WebhookRecord))
        total_count = len(total_result.scalars().all())
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
        processed_result = await db.execute(select(WebhookRecord).filter(WebhookRecord.processed == True))
        processed_count = len(processed_result.scalars().all())
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
        unprocessed_result = await db.execute(select(WebhookRecord).filter(WebhookRecord.processed == False))
        unprocessed_count = len(unprocessed_result.scalars().all())
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –≤ Webkassa
        success_result = await db.execute(select(WebhookRecord).filter(WebhookRecord.webkassa_status == "success"))
        success_count = len(success_result.scalars().all())
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –≤ Webkassa
        failed_result = await db.execute(select(WebhookRecord).filter(WebhookRecord.webkassa_status == "failed"))
        failed_count = len(failed_result.scalars().all())
        
        return {
            "success": True,
            "stats": {
                "total_records": total_count,
                "processed_records": processed_count,
                "unprocessed_records": unprocessed_count,
                "webkassa_success": success_count,
                "webkassa_failed": failed_count,
                "processing_rate": round((processed_count / total_count * 100), 2) if total_count > 0 else 0,
                "success_rate": round((success_count / total_count * 100), 2) if total_count > 0 else 0
            }
        }
        
    except Exception as e:
        logger.error(f"Error getting webhook stats: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")


async def webhook_queue_worker():
    """
    Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    """
    logger.info("üöÄ Starting webhook queue worker...")
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            task: WebhookTask = await webhook_processing_queue.get()
            logger.info(f"üìã Processing webhook task: {task.task_id}")
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook —Å —Å–µ–º–∞—Ñ–æ—Ä–æ–º –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                async with webhook_processing_semaphore:
                    result = await process_webhook_internal(task.payload, task.request, task.db_session)
                    task.result_future.set_result(result)
                    logger.info(f"‚úÖ Completed webhook task: {task.task_id}")
            except Exception as e:
                logger.error(f"‚ùå Failed webhook task {task.task_id}: {e}", exc_info=True)
                task.result_future.set_exception(e)
            finally:
                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                webhook_processing_queue.task_done()
                
        except Exception as e:
            logger.error(f"‚ùå Error in webhook queue worker: {e}", exc_info=True)
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –ó–∞–ø—É—Å–∫–∞–µ–º worker –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
_queue_worker_task = None

def ensure_queue_worker_running():
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ worker –æ—á–µ—Ä–µ–¥–∏
    """
    logger.info("üîÑ Ensuring queue worker is running")
    pass



