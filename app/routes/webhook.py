"""
–ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç Altegio
"""
import logging
import json
import os
import re
from datetime import datetime
from typing import Dict, Any, Optional, Union, List
import uuid

import httpx
from fastapi import APIRouter, HTTPException, Depends, Request
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from app.db import get_db_session
from app.models import WebhookRecord, ApiKey
from app.schemas.altegio import AltegioWebhookPayload, WebhookResponse

router = APIRouter()
logger = logging.getLogger(__name__)


def decode_unicode_escapes(text: str) -> str:
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç Unicode escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    –ù–∞–ø—Ä–∏–º–µ—Ä: "\\u0421\\u0440\\u043e\\u043a" -> "–°—Ä–æ–∫"
    """
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª—ç—à–∏ –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
        text = text.replace('\\\\u', '\\u')
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º unicode escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        def decode_match(match):
            try:
                unicode_char = match.group(0)
                return unicode_char.encode().decode('unicode_escape')
            except:
                return match.group(0)
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã \uXXXX –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏—Ö
        result = re.sub(r'\\u[0-9a-fA-F]{4}', decode_match, text)
        return result
    except Exception as e:
        logger.warning(f"Failed to decode unicode escapes in: {text[:100]}..., error: {e}")
        return text


def format_api_response(response_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –ª–æ–≥–æ–≤ —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º Unicode
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON —Å—Ç—Ä–æ–∫—É
        response_str = json.dumps(response_data, ensure_ascii=False, indent=2)
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º Unicode escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        decoded_str = decode_unicode_escapes(response_str)
        
        return decoded_str
    except Exception as e:
        logger.warning(f"Failed to format API response: {e}")
        return str(response_data)


async def verify_webhook_signature(request: Request) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –æ—Ç Altegio
    TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏/—Ç–æ–∫–µ–Ω–∞ –æ—Ç Altegio
    """
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    signature = request.headers.get("X-Altegio-Signature")
    token = request.headers.get("Authorization")
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    # if not signature or not verify_signature(signature, body, secret):
    #     return False
    
    logger.info(f"Webhook signature check - Signature: {signature}, Token: {token}")
    return True  # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É


async def get_altegio_document(company_id: int, document_id: int) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ Altegio API.
    """
    altegio_api_url = os.getenv("ALTEGIO_API_URL", "https://api.alteg.io/api/v1")
    altegio_auth_token = os.getenv("ALTEGIO_AUTH_TOKEN") # Bearer token
    altegio_user_id = os.getenv("ALTEGIO_USER_ID") # User ID

    if not altegio_auth_token or not altegio_user_id:
        logger.error("Altegio API credentials not configured in .env")
        raise HTTPException(status_code=500, detail="Altegio API credentials not configured")

    url = f"{altegio_api_url}/transactions/{company_id}/?document_id={document_id}"
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_variants = [
        {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {altegio_auth_token}, User {altegio_user_id}",
            "Accept": "application/vnd.api.v2+json"
        },
    ]

    logger.info(f"Making request to Altegio API: {url}")

    for i, headers in enumerate(header_variants):
        try:
            logger.info(f"Attempt {i+1}: Using headers: {[key for key in headers.keys() if key != 'Authorization']}")
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, headers=headers, timeout=30)
                response.raise_for_status()
                logger.info(f"Success with header variant {i+1}")
                return response.json()
                
        except httpx.HTTPStatusError as e:
            logger.warning(f"Attempt {i+1} failed with status {e.response.status_code}: {e.response.text}")
            if i == len(header_variants) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                logger.error(f"All header variants failed. Last error: {e.response.text}")
                raise HTTPException(status_code=e.response.status_code, detail=f"Altegio API error: {e.response.text}")
            continue
        except httpx.RequestError as e:
            logger.error(f"Altegio API request failed: {e}")
            raise HTTPException(status_code=500, detail=f"Altegio API request failed: {e}")
        except Exception as e:
            logger.error(f"Unexpected error fetching Altegio document: {e}")
            raise HTTPException(status_code=500, detail=f"Unexpected error: {e}")
    
    # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    raise HTTPException(status_code=500, detail="Failed to authenticate with Altegio API")


async def refresh_webkassa_api_key(db: AsyncSession) -> Optional[ApiKey]:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç API –∫–ª—é—á Webkassa, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    """
    logger.info("üîÑ Attempting to refresh Webkassa API key...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞
        import subprocess
        import sys
        
        logger.info("üìû Calling update script...")
        result = subprocess.run([
            sys.executable, "/app/scripts/update_webkassa_key.py"
        ], capture_output=True, text=True, cwd="/app")
        
        if result.returncode == 0:
            logger.info("‚úÖ API key update script completed successfully")
            logger.info(f"üìù Script output: {result.stdout[-200:]}")  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–ª—é—á –∏–∑ –ë–î
            await db.commit()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            return await get_webkassa_api_key(db)
        else:
            logger.error(f"‚ùå API key update script failed with code {result.returncode}")
            logger.error(f"‚ùå Script error: {result.stderr}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Error refreshing API key: {e}")
        return None


async def get_webkassa_api_key(db: AsyncSession) -> Optional[ApiKey]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á Webkassa –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    """
    logger.info("üîç Searching for Webkassa API key in database...")
    
    try:
        result = await db.execute(select(ApiKey).filter(ApiKey.service_name == "Webkassa"))
        api_key_obj = result.scalars().first()
        
        if api_key_obj:
            logger.info(f"‚úÖ Found Webkassa API key in database:")
            logger.info(f"   üîë Key ID: {api_key_obj.id}")
            logger.info(f"   üè∑Ô∏è Service: {api_key_obj.service_name}")
            logger.info(f"   üë§ User ID (token): {api_key_obj.user_id}")
            logger.info(f"   üóìÔ∏è Created: {api_key_obj.created_at}")
            logger.info(f"   üóìÔ∏è Updated: {api_key_obj.updated_at}")
            logger.info(f"   üîê API Key (first 20 chars): {api_key_obj.api_key[:20]}...")
            logger.info(f"   üîê API Key (last 20 chars): ...{api_key_obj.api_key[-20:]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫–ª—é—á–∞
            from datetime import datetime, timezone
            if api_key_obj.updated_at:
                age = datetime.now(timezone.utc) - api_key_obj.updated_at.replace(tzinfo=timezone.utc)
                logger.info(f"   ‚è∞ Key age: {age.total_seconds() / 3600:.1f} hours")
                
                if age.total_seconds() > 21600:  # 6 —á–∞—Å–æ–≤
                    logger.warning(f"‚ö†Ô∏è API key is older than 6 hours, might be expired!")
            
            return api_key_obj
        else:
            logger.error("‚ùå No Webkassa API key found in database!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ –ë–î –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            all_keys_result = await db.execute(select(ApiKey))
            all_keys = all_keys_result.scalars().all()
            
            if all_keys:
                logger.info(f"üìã Found {len(all_keys)} total API keys in database:")
                for key in all_keys:
                    logger.info(f"   - Service: {key.service_name}, ID: {key.id}")
            else:
                logger.error("‚ùå Database has no API keys at all!")
            
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Error fetching Webkassa API key from database: {e}")
        return None


async def prepare_webkassa_data(payload: AltegioWebhookPayload, altegio_document: Dict[str, Any], db: AsyncSession, webkassa_token: str = None) -> Dict[str, Any]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Altegio webhook –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π Webkassa.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    if not webkassa_token:
        api_key_record = await get_webkassa_api_key(db)
        if not api_key_record:
            raise ValueError("Webkassa API key not found in database")
        webkassa_token = api_key_record.user_id
        logger.info(f"üîë Using webkassa token from database: {webkassa_token}")
    
    logger.info(f"üîÑ Starting data transformation for Webkassa")
    logger.info(f"üì• Input webhook data: client_phone={payload.data.client.phone}, resource_id={payload.resource_id}")
    logger.info(f"üì• Input services count: {len(payload.data.services)}")
    logger.info(f"üì• Input altegio_document transactions count: {len(altegio_document.get('data', []))}")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Altegio webhook
    client_phone = payload.data.client.phone
    # resource_id = payload.resource_id
    services = payload.data.services
    goods = payload.data.goods_transactions

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Altegio document
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ altegio_document['data'] —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    transactions = altegio_document.get('data', [])

    positions = []
    payments = []

    logger.info(f"üõçÔ∏è Processing {len(services)} services from webhook:")

    total_sum_for_webkassa = 0

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π (—É—Å–ª—É–≥) –∏–∑ webhook
    for i, service in enumerate(services):
        service_total = service.cost_per_unit * service.amount * (1 - service.discount / 100)  # –°—É–º–º–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        position = {
            "Count": service.amount,
            "Price": service.cost_per_unit ,#/ 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ç–µ–Ω–≥–µ
            "PositionName": service.title,
            "Discount": service.discount * service.cost / 100,  # –°–∫–∏–¥–∫–∞ –≤ —Ç–µ–Ω–≥–µ
            "Tax": "0",
            "TaxType": "0", 
            "TaxPercent": "0"
        }
        positions.append(position)
        total_sum_for_webkassa += service_total
        
        logger.info(f"  üì¶ Service {i+1}: {service.title}")
        logger.info(f"     üíµ Cost: {service.cost_per_unit} —Ç–µ–Ω–≥–µ x {service.amount} = {(service.cost_per_unit * service.amount)} —Ç–µ–Ω–≥–µ")
        logger.info(f"     üé´ Discount: {service.discount}% = {service.discount * service.cost / 100} —Ç–µ–Ω–≥–µ")
        logger.info(f"     üí∞ Total: {service_total} —Ç–µ–Ω–≥–µ")

    for i, good in enumerate(goods):
        good_total = good.cost_per_unit * abs(good.amount) * (1 - good.discount / 100)  # –°—É–º–º–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        position = {
            "Count": abs(good.amount),
            "Price": service.cost_per_unit ,#/ 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ç–µ–Ω–≥–µ
            "PositionName": good.title,
            "Discount": good.discount * good.cost / 100,  # –°–∫–∏–¥–∫–∞ –≤ —Ç–µ–Ω–≥–µ
            "Tax": "0",
            "TaxType": "0", 
            "TaxPercent": "0"
        }
        positions.append(position)
        total_sum_for_webkassa += service_total
        
        logger.info(f"  üì¶ Service {i+1}: {good.title}")
        logger.info(f"     üíµ Cost: {good.cost_per_unit} —Ç–µ–Ω–≥–µ x {abs(good.amount)} = {(good.cost_per_unit * abs(good.amount))} —Ç–µ–Ω–≥–µ")
        logger.info(f"     üé´ Discount: {good.discount}% = {good.discount * good.cost / 100} —Ç–µ–Ω–≥–µ")
        logger.info(f"     üí∞ Total: {good_total} —Ç–µ–Ω–≥–µ")



    logger.info(f"üí≥ Processing {len(transactions)} transactions from Altegio document:")
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ Altegio document
    # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ, –º—ã –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π (–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è)
    # –∏ –º–∞–ø–ø–∏–º –∏—Ö –Ω–∞ —Ç–∏–ø—ã –æ–ø–ª–∞—Ç—ã Webkassa
    for i, transaction in enumerate(transactions):
        if transaction.get('amount', 0) > 0:
            payment_type = 1 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞

            # account_title = transaction.get('account', {}).get('title', '').lower()
            # if 'kaspi' in account_title or '–∫–∞—Å–ø–∏' in account_title:
            if transaction.get('account', {}).get('is_cash', True):
                payment_type = 1 # Kaspi –æ–±—ã—á–Ω–æ –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π
            else:
                payment_type = 0 # –ù–∞–ª–∏—á–Ω—ã–µ
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

            payment = {
                "Sum": transaction["amount"],
                "PaymentType": payment_type
            }
            payments.append(payment)
            
            payment_type_name = "–ù–∞–ª–∏—á–Ω—ã–µ" if payment_type == 0 else "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π"
            logger.info(f"  üí≥ Payment {i+1}: {transaction['amount']} —Ç–µ–Ω–≥–µ ({payment_type_name})")
            logger.info(f"     üè¶ Account: {transaction.get('account', {}).get('title', 'Unknown')}")

    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å—É–º–º—É –∏–∑ webhook
    if not payments:
        default_payment = {
            "Sum": total_sum_for_webkassa,
            "PaymentType": 1 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
        }
        payments.append(default_payment)
        logger.warning(f"‚ö†Ô∏è No payments found in Altegio document, using default payment: {total_sum_for_webkassa} —Ç–µ–Ω–≥–µ (–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π)")

    webkassa_data = {
        "CashboxUniqueNumber": os.getenv("WEBKASSA_CASHBOX_ID"),
        "OperationType": 2,  # –ü—Ä–æ–¥–∞–∂–∞
        "Positions": positions,
        "TicketModifiers": [],
        "Payments": payments,   
        "Change": 0.0,
        "RoundType": 2,
        "ExternalCheckNumber": payload.data.id,#str(uuid.uuid4()),  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        "CustomerPhone": client_phone
    }

    logger.info(f"‚úÖ Data transformation completed: check number {webkassa_data['ExternalCheckNumber']}")
    logger.info(f"   üìû Customer phone: {client_phone}")
    logger.info(f"   üì¶ Positions count: {len(positions)}")
    logger.info(f"   üí≥ Payments count: {len(payments)}")
    logger.info(f"   üí∞ Total amount: {total_sum_for_webkassa} —Ç–µ–Ω–≥–µ")
    logger.info(f"   üîë Token will be sent in Authorization header")
    
    return webkassa_data







async def send_to_webkassa_with_auto_refresh(db: AsyncSession, webkassa_data: dict) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Webkassa API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–ª—é—á–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key_record = await get_webkassa_api_key(db)

    if not api_key_record:
        error_message = "‚ùå No Webkassa API key found in database"
        logger.error(error_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        await send_telegram_notification(
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á Webkassa",
            {
                "–û—à–∏–±–∫–∞": "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                "–î–µ–π—Å—Ç–≤–∏–µ": "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞"
            }
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á
        logger.info("üîÑ Attempting to get fresh API key...")
        refreshed_key = await refresh_webkassa_api_key(db)
        if refreshed_key:
            api_key_record = refreshed_key
            logger.info("‚úÖ Successfully obtained fresh API key")
        else:
            final_error = "‚ùå Failed to obtain API key"
            logger.error(final_error)
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            await send_telegram_notification(
                "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á Webkassa",
                {
                    "–ü—Ä–æ–±–ª–µ–º–∞": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ",
                    "–í–ª–∏—è–Ω–∏–µ": "–§–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—è —á–µ–∫–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞",
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                }
            )
            
            return {"success": False, "error": "No API key found and unable to refresh"}
    
    api_token = api_key_record.api_key
    logger.info(f"üîë Using API token from database (ID: {api_key_record.id})")
    logger.info(f"üîë Token first 20 chars: {api_token[:20]}...")
    logger.info(f"üîë Token last 20 chars: ...{api_token[-20:]}")
    
    # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    result = await send_to_webkassa(webkassa_data, api_token)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not result["success"] and "errors" in result:
        # –ò—â–µ–º –æ—à–∏–±–∫—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ (–∫–æ–¥ 2)
        auth_error_found = False
        for error_msg in result["errors"]:
            if "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫" in error_msg or "Code 2:" in error_msg:
                auth_error_found = True
                break
        
        if auth_error_found:
            logger.warning("‚ö†Ô∏è Session expired error detected - attempting to refresh API key...")
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            logger.error(f"üîç Authorization error details:")
            logger.error(f"   üìã Error messages: {result.get('errors', [])}")
            logger.error(f"   üìã Raw response: {result.get('raw_response', {})}")
            logger.error(f"   üîë Current token (first 20): {api_token[:20]}...")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await send_telegram_notification(
                "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Webkassa - –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞",
                {
                    "–¢–∏–ø –æ—à–∏–±–∫–∏": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫ (Code 2)",
                    "–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω": f"{api_token[:20]}...{api_token[-10:]}",
                    "–û—à–∏–±–∫–∏ API": "; ".join(result.get('errors', [])),
                    "–ö–∞—Å—Å–∞": os.getenv('WEBKASSA_CASHBOX_ID'),
                    "–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞": json.dumps(webkassa_data, ensure_ascii=False, indent=2)[:400] + "..." if len(json.dumps(webkassa_data, ensure_ascii=False)) > 400 else json.dumps(webkassa_data, ensure_ascii=False, indent=2),
                    "–ü–æ–∑–∏—Ü–∏–∏": f"{len(webkassa_data.get('Positions', []))} —à—Ç.",
                    "–ü–ª–∞—Ç–µ–∂–∏": f"{len(webkassa_data.get('Payments', []))} —à—Ç.",
                    "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞": webkassa_data.get('CustomerPhone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    "–ù–æ–º–µ—Ä —á–µ–∫–∞": webkassa_data.get('ExternalCheckNumber', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    "–î–µ–π—Å—Ç–≤–∏–µ": "–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞"
                }
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á
            refreshed_key = await refresh_webkassa_api_key(db)
            
            if refreshed_key and refreshed_key.api_key != api_token:
                logger.info("‚úÖ Successfully refreshed API key, retrying request...")
                logger.info(f"üîÑ New token (first 20): {refreshed_key.api_key[:20]}...")
                
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
                retry_result = await send_to_webkassa(webkassa_data, refreshed_key.api_key)
                if retry_result["success"]:
                    logger.info("‚úÖ Request succeeded after key refresh")
                    
                    # –£—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await send_telegram_notification(
                        "‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π Webkassa —Ä–µ—à–µ–Ω–∞",
                        {
                            "–†–µ–∑—É–ª—å—Ç–∞—Ç": "API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
                            "–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω": f"{refreshed_key.api_key[:20]}...{refreshed_key.api_key[-10:]}",
                            "–°—Ç–∞—Ç—É—Å": "–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞"
                        }
                    )
                else:
                    logger.error("‚ùå Request failed even after key refresh")
                    logger.error(f"üîç Retry failure details: {retry_result}")
                    
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    await send_telegram_notification(
                        "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Webkassa –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞",
                        {
                            "–ü—Ä–æ–±–ª–µ–º–∞": "–ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª –¥–∞–∂–µ —Å –Ω–æ–≤—ã–º API –∫–ª—é—á–æ–º",
                            "–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω": f"{refreshed_key.api_key[:20]}...{refreshed_key.api_key[-10:]}",
                            "–û—à–∏–±–∫–∏": "; ".join(retry_result.get('errors', [])),
                            "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Webkassa API"
                        }
                    )
                return retry_result
            else:
                logger.error("‚ùå Failed to refresh API key")
                logger.error(f"üîç Refresh failure details: refreshed_key={refreshed_key}")
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await send_telegram_notification(
                    "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á Webkassa",
                    {
                        "–ü—Ä–æ–±–ª–µ–º–∞": "–°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª",
                        "–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω": f"{api_token[:20]}...{api_token[-10:]}",
                        "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è": "–ù–µ—É–¥–∞—á–∞",
                        "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π"
                    }
                )
                return result
    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
    if not result["success"] and "errors" in result:
        # –ò—â–µ–º –æ—à–∏–±–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã (–∫–æ–¥ 11)
        shift_error_found = False
        for error_msg in result["errors"]:
            if "–∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É" in error_msg or "Code 11:" in error_msg:
                shift_error_found = True
                break
        
        if shift_error_found:
            logger.warning("‚ö†Ô∏è Shift close error detected - attempting to close shift...")
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å–º–µ–Ω—ã
            logger.error(f"üîç Shift close error details:")
            logger.error(f"   üìã Error messages: {result.get('errors', [])}")
            logger.error(f"   üìã Raw response: {result.get('raw_response', {})}")
            logger.error(f"   üì¶ Cashbox ID: {os.getenv('WEBKASSA_CASHBOX_ID')}")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ–± –æ—à–∏–±–∫–µ —Å–º–µ–Ω—ã
            await send_telegram_notification(
                "–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã Webkassa - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã",
                {
                    "–¢–∏–ø –æ—à–∏–±–∫–∏": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É (Code 11)",
                    "–ö–∞—Å—Å–∞": os.getenv('WEBKASSA_CASHBOX_ID'),
                    "–û—à–∏–±–∫–∏ API": "; ".join(result.get('errors', [])),
                    "–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞": json.dumps(webkassa_data, ensure_ascii=False, indent=2)[:400] + "..." if len(json.dumps(webkassa_data, ensure_ascii=False)) > 400 else json.dumps(webkassa_data, ensure_ascii=False, indent=2),
                    "–ü–æ–∑–∏—Ü–∏–∏": f"{len(webkassa_data.get('Positions', []))} —à—Ç.",
                    "–ü–ª–∞—Ç–µ–∂–∏": f"{len(webkassa_data.get('Payments', []))} —à—Ç.",
                    "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞": webkassa_data.get('CustomerPhone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    "–ù–æ–º–µ—Ä —á–µ–∫–∞": webkassa_data.get('ExternalCheckNumber', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    "–¢–æ–∫–µ–Ω": f"{api_token[:20]}...{api_token[-10:]}",
                    "–î–µ–π—Å—Ç–≤–∏–µ": "–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã"
                }
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É
            closed_shift = await close_webkassa_shift(db, api_token)
            
            if closed_shift["success"]:
                logger.info("‚úÖ Successfully closed shift, retrying original request...")
                
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
                retry_result = await send_to_webkassa(webkassa_data, api_token)
                if retry_result["success"]:
                    logger.info("‚úÖ Request succeeded after shift close")
                    
                    # –£—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await send_telegram_notification(
                        "‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å–º–µ–Ω–æ–π Webkassa —Ä–µ—à–µ–Ω–∞",
                        {
                            "–†–µ–∑—É–ª—å—Ç–∞—Ç": "–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞",
                            "–ö–∞—Å—Å–∞": os.getenv('WEBKASSA_CASHBOX_ID'),
                            "–°—Ç–∞—Ç—É—Å": "–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã"
                        }
                    )
                else:
                    logger.error("‚ùå Request failed even after shift close")
                    logger.error(f"üîç Retry after shift close failure: {retry_result}")
                    
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
                    await send_telegram_notification(
                        "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Webkassa –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã",
                        {
                            "–ü—Ä–æ–±–ª–µ–º–∞": "–ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª –¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã",
                            "–ö–∞—Å—Å–∞": os.getenv('WEBKASSA_CASHBOX_ID'),
                            "–û—à–∏–±–∫–∏": "; ".join(retry_result.get('errors', [])),
                            "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Å—Å—ã"
                        }
                    )
                return retry_result
            else:
                logger.error("‚ùå Failed to close shift")
                logger.error(f"üîç Shift close failure details: {closed_shift}")
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
                await send_telegram_notification(
                    "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É Webkassa",
                    {
                        "–ü—Ä–æ–±–ª–µ–º–∞": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ",
                        "–ö–∞—Å—Å–∞": os.getenv('WEBKASSA_CASHBOX_ID'),
                        "–û—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è": "; ".join(closed_shift.get('errors', [])),
                        "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Webkassa"
                    }
                )
                return result
    
    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞ –∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É—Å–ø–µ—à–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É
    if not result["success"]:
        logger.error(f"üîç General Webkassa error details:")
        logger.error(f"   üìã Success: {result.get('success')}")
        logger.error(f"   üìã Error: {result.get('error')}")
        logger.error(f"   üìã Errors: {result.get('errors', [])}")
        logger.error(f"   üìã Raw response: {result.get('raw_response', {})}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
        await send_telegram_notification(
            "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Webkassa API",
            {
                "–¢–∏–ø": "–û–±—â–∞—è –æ—à–∏–±–∫–∞ API",
                "–û—à–∏–±–∫–∞": result.get('error', 'Unknown'),
                "–û—à–∏–±–∫–∏ API": "; ".join(result.get('errors', [])),
                "–ö–∞—Å—Å–∞": os.getenv('WEBKASSA_CASHBOX_ID'),
                "–¢–æ–∫–µ–Ω": f"{api_token[:20]}...{api_token[-10:]}",
                "–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞": json.dumps(webkassa_data, ensure_ascii=False, indent=2)[:500] + "..." if len(json.dumps(webkassa_data, ensure_ascii=False)) > 500 else json.dumps(webkassa_data, ensure_ascii=False, indent=2),
                "–ü–æ–∑–∏—Ü–∏–∏": f"{len(webkassa_data.get('Positions', []))} —à—Ç.",
                "–ü–ª–∞—Ç–µ–∂–∏": f"{len(webkassa_data.get('Payments', []))} —à—Ç.",
                "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞": webkassa_data.get('CustomerPhone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                "–ù–æ–º–µ—Ä —á–µ–∫–∞": webkassa_data.get('ExternalCheckNumber', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                "–¢—Ä–µ–±—É–µ—Ç—Å—è": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"
            }
        )
    
    return result


async def send_to_webkassa(data: dict, api_token: str) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ API Webkassa.
    """
    webkassa_api_url = os.getenv("WEBKASSA_API_URL", "https://api.webkassa.kz")
    
    # –û–¢–õ–ê–î–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info(f"üîç WEBKASSA_API_URL from env: '{webkassa_api_url}'")
    logger.info(f"üîç All WEBKASSA env vars: {[k for k in os.environ.keys() if 'WEBKASSA' in k]}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞
    endpoint_url = f"{webkassa_api_url.rstrip('/')}/api/Check"
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Webkassa API
    headers = {
        "Content-Type": "application/json",
        "X-API-KEY": "WKD-68D0CA3C-191F-4DBB-B280-D483724EA7A9"  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª—é—á
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º Token –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    request_data = {
        "Token": api_token,  # –¢–æ–∫–µ–Ω –∏–¥–µ—Ç –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        **data  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    }

    logger.info(f"üåê Sending to Webkassa API: {endpoint_url}")
    logger.info(f"üîë Using API token in body: {api_token[:20]}...")
    logger.info(f"üìã Request headers: {headers}")
    logger.info(f"üìã Request data: {json.dumps(request_data, ensure_ascii=False, indent=2)}")

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(endpoint_url, json=request_data, headers=headers, timeout=30)
            response_data = response.json()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º Unicode
            formatted_response = format_api_response(response_data)
            logger.info(f"üì§ Webkassa API response received:")
            logger.info(f"üéØ Response: {formatted_response}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏—Ö
            if "Errors" in response_data and response_data["Errors"]:
                error_messages = []
                for error in response_data["Errors"]:
                    error_text = error.get("Text", "")
                    decoded_error = decode_unicode_escapes(error_text)
                    error_code = error.get("Code", "")
                    error_messages.append(f"Code {error_code}: {decoded_error}")
                
                logger.error(f"‚ùå Webkassa API errors: {'; '.join(error_messages)}")
                return {"success": False, "errors": error_messages, "raw_response": response_data}
            
            response.raise_for_status()
            return {"success": True, "data": response_data}
            
    except httpx.RequestError as e:
        logger.error(f"Webkassa API request failed: {e}")
        return {"success": False, "error": f"Network error: {e}"}
    except httpx.HTTPStatusError as e:
        error_text = e.response.text
        decoded_error = decode_unicode_escapes(error_text)
        logger.error(f"Webkassa API returned error status {e.response.status_code}: {decoded_error}")
        return {"success": False, "error": f"API error: {decoded_error}"}
    except Exception as e:
        logger.error(f"Unexpected error during Webkassa API call: {e}")
        return {"success": False, "error": f"Unexpected error: {e}"}


@router.post("/webhook", response_model=WebhookResponse)
async def handle_altegio_webhook(
    payload: Union[AltegioWebhookPayload, List[AltegioWebhookPayload]],
    request: Request,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Altegio
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, —Ç–∞–∫ –∏ –º–∞—Å—Å–∏–≤—ã webhook
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–±–µ–∑ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        body = await request.body()
        body_size = len(body)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ –Ω–µ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"üîç Webhook data received: {body_size} bytes")
        
        # –õ–æ–≥–∏—Ä—É–µ–º structured –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ payload
        if isinstance(payload, list):
            logger.info(f"üì¶ Received webhook array with {len(payload)} items")
            for i, item in enumerate(payload[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
                logger.info(f"   üìã Item {i+1}: resource_id={item.resource_id}, company_id={item.company_id}, status={item.status}")
            if len(payload) > 3:
                logger.info(f"   ... –∏ –µ—â–µ {len(payload) - 3} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        else:
            logger.info(f"üì¶ Received single webhook: resource_id={payload.resource_id}, company_id={payload.company_id}, status={payload.status}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º payload –∫ –º–∞—Å—Å–∏–≤—É –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if isinstance(payload, list):
            webhook_list = payload
            logger.info(f"üì¶ Received webhook array with {len(webhook_list)} items")
        else:
            webhook_list = [payload]
            logger.info(f"üì¶ Received single webhook item, normalized to array")
        
        processed_records = []
        
        for single_payload in webhook_list:
            logger.info(f"Processing webhook: company_id={single_payload.company_id}, "
                       f"resource={single_payload.resource}, resource_id={single_payload.resource_id}, "
                       f"status={single_payload.status}")
            
            if not await verify_webhook_signature(request):
                logger.warning("Invalid webhook signature")
                raise HTTPException(status_code=401, detail="Invalid webhook signature")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            comment_text = single_payload.data.comment or ""
            has_fch = '—Ñ—á' in comment_text.lower() if comment_text else False
            
            conditions_met = (
                single_payload.resource == 'record' and 
                single_payload.data.comment and has_fch and 
                single_payload.data.paid_full == 1
            )
            
            logger.info(f"üîç Checking processing conditions for webhook {single_payload.resource_id}:")
            logger.info(f"   üìã Resource: {single_payload.resource} (required: 'record') {'‚úÖ' if single_payload.resource == 'record' else '‚ùå'}")
            logger.info(f"   üí¨ Comment: '{comment_text}' (must contain '—Ñ—á') {'‚úÖ' if has_fch else '‚ùå'}")
            logger.info(f"   üí¨ Comment bytes: {comment_text.encode('utf-8') if comment_text else b''}")
            logger.info(f"   üí¨ Contains '—Ñ—á': {has_fch}")
            logger.info(f"   üí∞ Paid full: {single_payload.data.paid_full} (required: 1) {'‚úÖ' if single_payload.data.paid_full == 1 else '‚ùå'}")
            logger.info(f"   üéØ Overall result: {'‚úÖ PROCESSING' if conditions_met else '‚ùå SKIPPING'}")
            
            if not conditions_met:
                logger.info(f"Webhook {single_payload.resource_id} does not meet the required conditions for processing.")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç webhook, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            existing_record = await db.execute(
                select(WebhookRecord).filter(
                    WebhookRecord.resource_id == single_payload.resource_id,
                    WebhookRecord.company_id == single_payload.company_id,
                    WebhookRecord.processed == True
                )
            )
            if existing_record.scalars().first():
                logger.info(f"Webhook with resource_id {single_payload.resource_id} already processed.")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π webhook

            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            webhook_record = await db.execute(
                select(WebhookRecord).filter(
                    WebhookRecord.resource_id == single_payload.resource_id,
                    WebhookRecord.company_id == single_payload.company_id
                )
            )
            webhook_record = webhook_record.scalars().first()

            if webhook_record:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                webhook_record.status = single_payload.status
                webhook_record.client_phone = single_payload.data.client.phone
                webhook_record.client_name = single_payload.data.client.name
                webhook_record.record_date = datetime.fromisoformat(single_payload.data.datetime.replace(" ", "T").split("+")[0])
                webhook_record.services_data = json.dumps([s.model_dump() for s in single_payload.data.services])
                webhook_record.comment = single_payload.data.comment
                webhook_record.raw_data = single_payload.model_dump()
                webhook_record.updated_at = datetime.utcnow()
                webhook_record.processed = False
                webhook_record.processing_error = None
                webhook_record.webkassa_status = None
                webhook_record.webkassa_response = None
                webhook_record.webkassa_request_id = None
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                webhook_record = WebhookRecord(
                    company_id=single_payload.company_id,
                    resource=single_payload.resource,
                    resource_id=single_payload.resource_id,
                    status=single_payload.status,
                    client_phone=single_payload.data.client.phone,
                    client_name=single_payload.data.client.name,
                    record_date=datetime.fromisoformat(single_payload.data.datetime.replace(" ", "T").split("+")[0]),
                    services_data=json.dumps([s.model_dump() for s in single_payload.data.services]),
                    comment=single_payload.data.comment,
                    raw_data=single_payload.model_dump()
                )
                db.add(webhook_record)
            
            await db.commit()
            await db.refresh(webhook_record)
            
            logger.info(f"Webhook saved/updated in database with ID: {webhook_record.id}")
            
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏
                altegio_document_id = None
                if single_payload.data.documents:
                    altegio_document_id = single_payload.data.documents[0].id
                
                if not altegio_document_id:
                    logger.warning(f"No document ID found in webhook for resource_id {single_payload.resource_id}")
                    webhook_record.processing_error = "No document ID found in webhook"
                    webhook_record.processed = False
                    await db.commit()
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç webhook

                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç Altegio
                altegio_document = None
                try:
                    logger.info(f"Requesting Altegio document: company_id={single_payload.company_id}, document_id={altegio_document_id}")
                    altegio_document = await get_altegio_document(single_payload.company_id, altegio_document_id)
                    logger.info(f"‚úÖ Successfully fetched Altegio document for resource_id {single_payload.resource_id}")
                    logger.info(f"üìÑ Altegio document content: {json.dumps(altegio_document, indent=2, ensure_ascii=False)}")
                except HTTPException as altegio_error:
                    logger.warning(f"‚ùå Failed to fetch Altegio document for resource_id {single_payload.resource_id}: {altegio_error.detail}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Altegio
                    altegio_document = {"data": []}

                fiscalization_data = await prepare_webkassa_data(single_payload, altegio_document, db)
                logger.info(f"üí∞ Prepared Webkassa fiscalization data:")
                logger.info(f"üìã Positions: {json.dumps(fiscalization_data.get('Positions', []), indent=2, ensure_ascii=False)}")
                logger.info(f"üí≥ Payments: {json.dumps(fiscalization_data.get('Payments', []), indent=2, ensure_ascii=False)}")
                logger.info(f"üßæ Full Webkassa request: {json.dumps(fiscalization_data, indent=2, ensure_ascii=False)}")

                webkassa_response = await send_to_webkassa_with_auto_refresh(db, fiscalization_data)
                
                is_success = webkassa_response.get("success", False)
                if is_success:
                    logger.info(f"‚úÖ SUCCESS: Webkassa fiscalization completed")
                else:
                    logger.info(f"‚ùå FAILED: Webkassa fiscalization failed")
                    # –û—à–∏–±–∫–∏ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã –≤ send_to_webkassa —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

                webhook_record.processed = True
                webhook_record.processed_at = datetime.utcnow()
                webhook_record.webkassa_status = "success" if webkassa_response.get("success") else "failed"
                webhook_record.webkassa_response = json.dumps(webkassa_response)
                webhook_record.webkassa_request_id = fiscalization_data.get("ExternalCheckNumber")
                await db.commit()
                
                processed_records.append(webhook_record.id)
                
            except Exception as e:
                logger.error(f"Error processing webhook {single_payload.resource_id}: {str(e)}", exc_info=True)
                webhook_record.processing_error = str(e)
                webhook_record.processed = False
                await db.commit()
                continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö webhook
        
        if processed_records:
            return WebhookResponse(
                success=True,
                message=f"Successfully processed {len(processed_records)} webhook(s)",
                record_id=processed_records[0],
                record_ids=processed_records,
                processed_count=len(processed_records)
            )
        else:
            return WebhookResponse(
                success=True,
                message=f"Received {len(webhook_list)} webhook(s), but none met processing conditions",
                processed_count=0
            )
        
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"Error processing webhook batch: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")


@router.get("/webhook/status/{resource_id}", response_model=WebhookResponse)
async def get_webhook_status(
    resource_id: int,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –ø–æ resource_id
    """
    try:
        webhook_record = await db.execute(
            select(WebhookRecord).filter(WebhookRecord.resource_id == resource_id)
        )
        webhook_record = webhook_record.scalars().first()

        if not webhook_record:
            raise HTTPException(status_code=404, detail="Webhook record not found")
        
        return WebhookResponse(
            success=webhook_record.processed,
            message=webhook_record.processing_error or "Processed successfully" if webhook_record.processed else "Pending processing",
            record_id=webhook_record.id
        )
        
    except Exception as e:
        logger.error(f"Error getting webhook status: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")


async def close_webkassa_shift(db: AsyncSession, api_token: str) -> dict:
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É –≤ Webkassa —á–µ—Ä–µ–∑ API.
    """
    # URL –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
    shift_close_url = "https://devkkm.webkassa.kz/api/v4/ZReport"
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        "Content-Type": "application/json",
        "x-api-key": "WKD-9BCE5F1E-AE33-4F39-BF8B-ABDBF2376398"  # API –∫–ª—é—á –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
    }
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    request_data = {
        "Token": api_token,  # –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        "cashboxUniqueNumber": os.getenv("WEBKASSA_CASHBOX_ID")  # ID –∫–∞—Å—Å—ã
    }

    logger.info(f"üîÑ Attempting to close Webkassa shift...")
    logger.info(f"üåê Sending to: {shift_close_url}")
    logger.info(f"üîë Using token: {api_token[:20]}...")
    logger.info(f"üì¶ Cashbox ID: {request_data['cashboxUniqueNumber']}")
    logger.info(f"üìã Request data: {json.dumps(request_data, ensure_ascii=False, indent=2)}")

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(shift_close_url, json=request_data, headers=headers, timeout=30)
            response_data = response.json()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º Unicode
            formatted_response = format_api_response(response_data)
            logger.info(f"üì§ Webkassa shift close response received:")
            logger.info(f"üéØ Response: {formatted_response}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏—Ö
            if "Errors" in response_data and response_data["Errors"]:
                error_messages = []
                for error in response_data["Errors"]:
                    error_text = error.get("Text", "")
                    decoded_error = decode_unicode_escapes(error_text)
                    error_code = error.get("Code", "")
                    error_messages.append(f"Code {error_code}: {decoded_error}")
                
                logger.error(f"‚ùå Webkassa shift close errors: {'; '.join(error_messages)}")
                return {"success": False, "errors": error_messages, "raw_response": response_data}
            
            response.raise_for_status()
            logger.info("‚úÖ Webkassa shift closed successfully")
            return {"success": True, "data": response_data}
            
    except httpx.RequestError as e:
        logger.error(f"Webkassa shift close request failed: {e}")
        return {"success": False, "error": f"Network error: {e}"}
    except httpx.HTTPStatusError as e:
        error_text = e.response.text
        decoded_error = decode_unicode_escapes(error_text)
        logger.error(f"Webkassa shift close returned error status {e.response.status_code}: {decoded_error}")
        return {"success": False, "error": f"API error: {decoded_error}"}
    except Exception as e:
        logger.error(f"Unexpected error during Webkassa shift close: {e}")
        return {"success": False, "error": f"Unexpected error: {e}"}


async def send_telegram_notification(message: str, error_details: dict = None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    """
    bot_token = "7922422379:AAEjk9PZuF8HgHNK3UoVDn-RIMXZhCfKewk"
    chat_id = os.getenv("TELEGRAM_CHAT_ID", "-1002353046003")  # ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    telegram_message = f"üö® –û–®–ò–ë–ö–ê WEBKASSA\n\n"
    telegram_message += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
    telegram_message += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n\n"
    
    if error_details:
        telegram_message += "üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n"
        for key, value in error_details.items():
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            if isinstance(value, str) and len(value) > 200:
                value = value[:200] + "..."
            telegram_message += f"‚Ä¢ {key}: {value}\n"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(telegram_message) > 4000:
        telegram_message = telegram_message[:4000] + "\n\n[–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ]"
    
    try:
        telegram_api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        payload = {
            "chat_id": chat_id,
            "text": telegram_message,
            "parse_mode": "HTML"
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(telegram_api_url, json=payload, timeout=10)
            
            if response.status_code == 200:
                logger.info("‚úÖ Telegram notification sent successfully")
                return True
            else:
                logger.error(f"‚ùå Failed to send Telegram notification: {response.status_code} - {response.text}")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå Error sending Telegram notification: {e}")
        return False



