"""
–ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç Altegio
"""
import logging
import json
import os
from datetime import datetime
from typing import Dict, Any, Optional, Union, List
import uuid

import httpx
from fastapi import APIRouter, HTTPException, Depends, Request
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from app.db import get_db_session
from app.models import WebhookRecord, ApiKey
from app.schemas.altegio import AltegioWebhookPayload, WebhookResponse

router = APIRouter()
logger = logging.getLogger(__name__)


async def verify_webhook_signature(request: Request) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –æ—Ç Altegio
    TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏/—Ç–æ–∫–µ–Ω–∞ –æ—Ç Altegio
    """
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    signature = request.headers.get("X-Altegio-Signature")
    token = request.headers.get("Authorization")
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    # if not signature or not verify_signature(signature, body, secret):
    #     return False
    
    logger.info(f"Webhook signature check - Signature: {signature}, Token: {token}")
    return True  # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É


async def get_altegio_document(company_id: int, document_id: int) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ Altegio API.
    """
    altegio_api_url = os.getenv("ALTEGIO_API_URL", "https://api.alteg.io/api/v1")
    altegio_auth_token = os.getenv("ALTEGIO_AUTH_TOKEN") # Bearer token
    altegio_user_id = os.getenv("ALTEGIO_USER_ID") # User ID

    if not altegio_auth_token or not altegio_user_id:
        logger.error("Altegio API credentials not configured in .env")
        raise HTTPException(status_code=500, detail="Altegio API credentials not configured")

    url = f"{altegio_api_url}/transactions/{company_id}/?document_id={document_id}"
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_variants = [
        {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {altegio_auth_token}, User {altegio_user_id}",
            "Accept": "application/vnd.api.v2+json"
        },
    ]

    logger.info(f"Making request to Altegio API: {url}")

    for i, headers in enumerate(header_variants):
        try:
            logger.info(f"Attempt {i+1}: Using headers: {[key for key in headers.keys() if key != 'Authorization']}")
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, headers=headers, timeout=30)
                response.raise_for_status()
                logger.info(f"Success with header variant {i+1}")
                return response.json()
                
        except httpx.HTTPStatusError as e:
            logger.warning(f"Attempt {i+1} failed with status {e.response.status_code}: {e.response.text}")
            if i == len(header_variants) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                logger.error(f"All header variants failed. Last error: {e.response.text}")
                raise HTTPException(status_code=e.response.status_code, detail=f"Altegio API error: {e.response.text}")
            continue
        except httpx.RequestError as e:
            logger.error(f"Altegio API request failed: {e}")
            raise HTTPException(status_code=500, detail=f"Altegio API request failed: {e}")
        except Exception as e:
            logger.error(f"Unexpected error fetching Altegio document: {e}")
            raise HTTPException(status_code=500, detail=f"Unexpected error: {e}")
    
    # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    raise HTTPException(status_code=500, detail="Failed to authenticate with Altegio API")


async def get_webkassa_api_key(db: AsyncSession) -> Optional[ApiKey]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á Webkassa –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    result = await db.execute(select(ApiKey).filter(ApiKey.service_name == "Webkassa"))
    return result.scalars().first()


def prepare_webkassa_data(payload: AltegioWebhookPayload, altegio_document: Dict[str, Any], webkassa_token: str) -> Dict[str, Any]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Altegio webhook –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π Webkassa.
    """
    logger.info(f"üîÑ Starting data transformation for Webkassa")
    logger.info(f"üì• Input webhook data: client_phone={payload.data.client.phone}, resource_id={payload.resource_id}")
    logger.info(f"üì• Input services count: {len(payload.data.services)}")
    logger.info(f"üì• Input altegio_document transactions count: {len(altegio_document.get('data', []))}")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Altegio webhook
    client_phone = payload.data.client.phone
    resource_id = payload.resource_id
    services = payload.data.services

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Altegio document
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ altegio_document['data'] —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    transactions = altegio_document.get('data', [])

    positions = []
    payments = []
    total_sum_for_webkassa = 0

    logger.info(f"üõçÔ∏è Processing {len(services)} services from webhook:")
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π (—É—Å–ª—É–≥) –∏–∑ webhook
    for i, service in enumerate(services):
        service_total = (service.cost * service.amount - service.discount) / 100
        position = {
            "Count": service.amount,
            "Price": service.cost / 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ç–µ–Ω–≥–µ
            "PositionName": service.title,
            "Discount": service.discount / 100 # –°–∫–∏–¥–∫–∞ –≤ —Ç–µ–Ω–≥–µ
        }
        positions.append(position)
        total_sum_for_webkassa += service_total
        
        logger.info(f"  üì¶ Service {i+1}: {service.title}")
        logger.info(f"     üíµ Cost: {service.cost/100} —Ç–µ–Ω–≥–µ x {service.amount} = {(service.cost * service.amount)/100} —Ç–µ–Ω–≥–µ")
        logger.info(f"     üé´ Discount: {service.discount/100} —Ç–µ–Ω–≥–µ")
        logger.info(f"     üí∞ Total: {service_total} —Ç–µ–Ω–≥–µ")

    logger.info(f"üí≥ Processing {len(transactions)} transactions from Altegio document:")
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ Altegio document
    # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ, –º—ã –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π (–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è)
    # –∏ –º–∞–ø–ø–∏–º –∏—Ö –Ω–∞ —Ç–∏–ø—ã –æ–ø–ª–∞—Ç—ã Webkassa
    for i, transaction in enumerate(transactions):
        if transaction.get('amount', 0) > 0:
            payment_type = 1 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
            account_title = transaction.get('account', {}).get('title', '').lower()
            if 'kaspi' in account_title or '–∫–∞—Å–ø–∏' in account_title:
                payment_type = 1 # Kaspi –æ–±—ã—á–Ω–æ –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π
            elif transaction.get('account', {}).get('is_cash', False):
                payment_type = 0 # –ù–∞–ª–∏—á–Ω—ã–µ
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

            payment = {
                "Sum": transaction["amount"],
                "PaymentType": payment_type
            }
            payments.append(payment)
            
            payment_type_name = "–ù–∞–ª–∏—á–Ω—ã–µ" if payment_type == 0 else "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π"
            logger.info(f"  üí≥ Payment {i+1}: {transaction['amount']} —Ç–µ–Ω–≥–µ ({payment_type_name})")
            logger.info(f"     üè¶ Account: {transaction.get('account', {}).get('title', 'Unknown')}")

    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å—É–º–º—É –∏–∑ webhook
    if not payments:
        default_payment = {
            "Sum": total_sum_for_webkassa,
            "PaymentType": 1 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
        }
        payments.append(default_payment)
        logger.warning(f"‚ö†Ô∏è No payments found in Altegio document, using default payment: {total_sum_for_webkassa} —Ç–µ–Ω–≥–µ (–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π)")

    webkassa_data = {
        "CashboxUniqueNumber": os.getenv("WEBKASSA_CASHBOX_ID"),
        "OperationType": 2, # –ü—Ä–æ–¥–∞–∂–∞
        "Positions": positions,
        "Payments": payments,
        "RoundType": 2,
        "ExternalCheckNumber": str(uuid.uuid4()), # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        "CustomerPhone": client_phone
    }

    logger.info(f"‚úÖ Data transformation completed:")
    logger.info(f"   üìû Customer phone: {client_phone}")
    logger.info(f"   üì¶ Positions count: {len(positions)}")
    logger.info(f"   üí≥ Payments count: {len(payments)}")
    logger.info(f"   üí∞ Total amount: {total_sum_for_webkassa} —Ç–µ–Ω–≥–µ")
    logger.info(f"   üîë Token will be sent in Authorization header")
    
    return webkassa_data


async def send_to_webkassa(data: dict, api_key: str) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ API Webkassa.
    """
    webkassa_api_url = os.getenv("WEBKASSA_API_URL", "https://api.webkassa.kz")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞
    endpoint_url = f"{webkassa_api_url.rstrip('/')}/api/Check"
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Bearer —Ç–æ–∫–µ–Ω
    }

    logger.info(f"üåê Sending to Webkassa API: {endpoint_url}")
    logger.info(f"üîë Using Bearer token: {api_key[:20]}...")

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(endpoint_url, json=data, headers=headers, timeout=30)
            response.raise_for_status()
            return response.json()
    except httpx.RequestError as e:
        logger.error(f"Webkassa API request failed: {e}")
        return {"success": False, "error": f"Network error: {e}"}
    except httpx.HTTPStatusError as e:
        logger.error(f"Webkassa API returned error status {e.response.status_code}: {e.response.text}")
        return {"success": False, "error": f"API error: {e.response.text}"}
    except Exception as e:
        logger.error(f"Unexpected error during Webkassa API call: {e}")
        return {"success": False, "error": f"Unexpected error: {e}"}


@router.post("/webhook", response_model=WebhookResponse)
async def handle_altegio_webhook(
    payload: Union[AltegioWebhookPayload, List[AltegioWebhookPayload]],
    request: Request,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Altegio
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, —Ç–∞–∫ –∏ –º–∞—Å—Å–∏–≤—ã webhook
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        body = await request.body()
        logger.info(f"üîç Raw webhook data received: {body.decode('utf-8')}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º payload –∫ –º–∞—Å—Å–∏–≤—É –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if isinstance(payload, list):
            webhook_list = payload
            logger.info(f"üì¶ Received webhook array with {len(webhook_list)} items")
        else:
            webhook_list = [payload]
            logger.info(f"üì¶ Received single webhook item, normalized to array")
        
        processed_records = []
        
        for single_payload in webhook_list:
            logger.info(f"Processing webhook: company_id={single_payload.company_id}, "
                       f"resource={single_payload.resource}, resource_id={single_payload.resource_id}, "
                       f"status={single_payload.status}")
            
            if not await verify_webhook_signature(request):
                logger.warning("Invalid webhook signature")
                raise HTTPException(status_code=401, detail="Invalid webhook signature")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            comment_text = single_payload.data.comment or ""
            has_fch = '—Ñ—á' in comment_text.lower() if comment_text else False
            
            conditions_met = (
                single_payload.resource == 'record' and 
                single_payload.data.comment and has_fch and 
                single_payload.data.paid_full == 1
            )
            
            logger.info(f"üîç Checking processing conditions for webhook {single_payload.resource_id}:")
            logger.info(f"   üìã Resource: {single_payload.resource} (required: 'record') {'‚úÖ' if single_payload.resource == 'record' else '‚ùå'}")
            logger.info(f"   üí¨ Comment: '{comment_text}' (must contain '—Ñ—á') {'‚úÖ' if has_fch else '‚ùå'}")
            logger.info(f"   üí¨ Comment bytes: {comment_text.encode('utf-8') if comment_text else b''}")
            logger.info(f"   üí¨ Contains '—Ñ—á': {has_fch}")
            logger.info(f"   üí∞ Paid full: {single_payload.data.paid_full} (required: 1) {'‚úÖ' if single_payload.data.paid_full == 1 else '‚ùå'}")
            logger.info(f"   üéØ Overall result: {'‚úÖ PROCESSING' if conditions_met else '‚ùå SKIPPING'}")
            
            if not conditions_met:
                logger.info(f"Webhook {single_payload.resource_id} does not meet the required conditions for processing.")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç webhook, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            existing_record = await db.execute(
                select(WebhookRecord).filter(
                    WebhookRecord.resource_id == single_payload.resource_id,
                    WebhookRecord.company_id == single_payload.company_id,
                    WebhookRecord.processed == True
                )
            )
            if existing_record.scalars().first():
                logger.info(f"Webhook with resource_id {single_payload.resource_id} already processed.")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π webhook

            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            webhook_record = await db.execute(
                select(WebhookRecord).filter(
                    WebhookRecord.resource_id == single_payload.resource_id,
                    WebhookRecord.company_id == single_payload.company_id
                )
            )
            webhook_record = webhook_record.scalars().first()

            if webhook_record:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                webhook_record.status = single_payload.status
                webhook_record.client_phone = single_payload.data.client.phone
                webhook_record.client_name = single_payload.data.client.name
                webhook_record.record_date = datetime.fromisoformat(single_payload.data.datetime.replace(" ", "T").split("+")[0])
                webhook_record.services_data = json.dumps([s.model_dump() for s in single_payload.data.services])
                webhook_record.comment = single_payload.data.comment
                webhook_record.raw_data = single_payload.model_dump()
                webhook_record.updated_at = datetime.utcnow()
                webhook_record.processed = False
                webhook_record.processing_error = None
                webhook_record.webkassa_status = None
                webhook_record.webkassa_response = None
                webhook_record.webkassa_request_id = None
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                webhook_record = WebhookRecord(
                    company_id=single_payload.company_id,
                    resource=single_payload.resource,
                    resource_id=single_payload.resource_id,
                    status=single_payload.status,
                    client_phone=single_payload.data.client.phone,
                    client_name=single_payload.data.client.name,
                    record_date=datetime.fromisoformat(single_payload.data.datetime.replace(" ", "T").split("+")[0]),
                    services_data=json.dumps([s.model_dump() for s in single_payload.data.services]),
                    comment=single_payload.data.comment,
                    raw_data=single_payload.model_dump()
                )
                db.add(webhook_record)
            
            await db.commit()
            await db.refresh(webhook_record)
            
            logger.info(f"Webhook saved/updated in database with ID: {webhook_record.id}")
            
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏
                altegio_document_id = None
                if single_payload.data.documents:
                    altegio_document_id = single_payload.data.documents[0].id
                
                if not altegio_document_id:
                    logger.warning(f"No document ID found in webhook for resource_id {single_payload.resource_id}")
                    webhook_record.processing_error = "No document ID found in webhook"
                    webhook_record.processed = False
                    await db.commit()
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç webhook

                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç Altegio
                altegio_document = None
                try:
                    logger.info(f"Requesting Altegio document: company_id={single_payload.company_id}, document_id={altegio_document_id}")
                    altegio_document = await get_altegio_document(single_payload.company_id, altegio_document_id)
                    logger.info(f"‚úÖ Successfully fetched Altegio document for resource_id {single_payload.resource_id}")
                    logger.info(f"üìÑ Altegio document content: {json.dumps(altegio_document, indent=2, ensure_ascii=False)}")
                except HTTPException as altegio_error:
                    logger.warning(f"‚ùå Failed to fetch Altegio document for resource_id {single_payload.resource_id}: {altegio_error.detail}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Altegio
                    altegio_document = {"data": []}

                webkassa_api_key_obj = await get_webkassa_api_key(db)
                if not webkassa_api_key_obj:
                    logger.error("Webkassa API key not found in database.")
                    webhook_record.processing_error = "Webkassa API key not found"
                    webhook_record.processed = False
                    await db.commit()
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç webhook

                webkassa_api_key = webkassa_api_key_obj.api_key
                webkassa_token = webkassa_api_key_obj.user_id

                fiscalization_data = prepare_webkassa_data(single_payload, altegio_document, webkassa_token)
                logger.info(f"üí∞ Prepared Webkassa fiscalization data:")
                logger.info(f"üìã Positions: {json.dumps(fiscalization_data.get('Positions', []), indent=2, ensure_ascii=False)}")
                logger.info(f"üí≥ Payments: {json.dumps(fiscalization_data.get('Payments', []), indent=2, ensure_ascii=False)}")
                logger.info(f"üßæ Full Webkassa request: {json.dumps(fiscalization_data, indent=2, ensure_ascii=False)}")

                webkassa_response = await send_to_webkassa(fiscalization_data, webkassa_api_key)
                logger.info(f"üì§ Webkassa API response received:")
                logger.info(f"üéØ Response: {json.dumps(webkassa_response, indent=2, ensure_ascii=False)}")
                
                is_success = webkassa_response.get("success", False)
                logger.info(f"{'‚úÖ SUCCESS' if is_success else '‚ùå FAILED'}: Webkassa fiscalization {'completed' if is_success else 'failed'}")

                webhook_record.processed = True
                webhook_record.processed_at = datetime.utcnow()
                webhook_record.webkassa_status = "success" if webkassa_response.get("success") else "failed"
                webhook_record.webkassa_response = json.dumps(webkassa_response)
                webhook_record.webkassa_request_id = fiscalization_data.get("ExternalCheckNumber")
                await db.commit()
                
                processed_records.append(webhook_record.id)
                
            except Exception as e:
                logger.error(f"Error processing webhook {single_payload.resource_id}: {str(e)}", exc_info=True)
                webhook_record.processing_error = str(e)
                webhook_record.processed = False
                await db.commit()
                continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö webhook
        
        if processed_records:
            return WebhookResponse(
                success=True,
                message=f"Successfully processed {len(processed_records)} webhook(s)",
                record_id=processed_records[0],
                record_ids=processed_records,
                processed_count=len(processed_records)
            )
        else:
            return WebhookResponse(
                success=True,
                message=f"Received {len(webhook_list)} webhook(s), but none met processing conditions",
                processed_count=0
            )
        
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"Error processing webhook batch: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")


@router.get("/webhook/status/{resource_id}", response_model=WebhookResponse)
async def get_webhook_status(
    resource_id: int,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –ø–æ resource_id
    """
    try:
        webhook_record = await db.execute(
            select(WebhookRecord).filter(WebhookRecord.resource_id == resource_id)
        )
        webhook_record = webhook_record.scalars().first()

        if not webhook_record:
            raise HTTPException(status_code=404, detail="Webhook record not found")
        
        return WebhookResponse(
            success=webhook_record.processed,
            message=webhook_record.processing_error or "Processed successfully" if webhook_record.processed else "Pending processing",
            record_id=webhook_record.id
        )
        
    except Exception as e:
        logger.error(f"Error getting webhook status: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")



