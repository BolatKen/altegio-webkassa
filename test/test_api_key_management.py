#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞
"""

import requests
import json

def test_api_key_management():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞
    print("üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å endpoint, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç get_webkassa_api_key
        response = requests.get("http://localhost:8080/api/webhook/status/123", timeout=10)
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code in [200, 404]:  # 404 –æ–∂–∏–¥–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç
            print("‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏...")
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint: {e}")
    
    print("\n" + "="*70 + "\n")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ Docker
    print("üîÑ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞")
    try:
        import subprocess
        result = subprocess.run([
            "docker", "exec", "altegio_webkassa_backend", 
            "python", "/app/scripts/update_webkassa_key.py"
        ], capture_output=True, text=True, timeout=30)
        
        print(f"üìä –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
        print(f"üìù –í—ã–≤–æ–¥: {result.stdout}")
        if result.stderr:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∏: {result.stderr}")
            
        if result.returncode == 0:
            print("‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.returncode}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")

def check_logs():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API –∫–ª—é—á–∞—Ö
    """
    print("üîç –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    try:
        import subprocess
        result = subprocess.run([
            "docker-compose", "logs", "backend", "--tail=20"
        ], capture_output=True, text=True, timeout=10, cwd=".")
        
        print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ backend:")
        print(result.stdout)
        
        if "webkassa" in result.stdout.lower() or "api" in result.stdout.lower():
            print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è API –∏–ª–∏ Webkassa –≤ –ª–æ–≥–∞—Ö")
        else:
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π API –∏–ª–∏ Webkassa –≤ –ª–æ–≥–∞—Ö")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏")
    print("="*70)
    
    test_api_key_management()
    
    print("\n" + "="*70 + "\n")
    
    check_logs()
    
    print("\n" + "="*70)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
