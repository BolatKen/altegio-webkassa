#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook
"""

import json
import requests
from datetime import datetime

# URL webhook'–∞
webhook_url = "http://localhost:8080/api/webhook"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ webhook'–∞ –æ—Ç Altegio (–∫–∞–∫ –º–∞—Å—Å–∏–≤)
test_webhook_data = [{
    "company_id": 123456,
    "resource": "record",
    "resource_id": 987654321,
    "status": "visit_confirmed",
    "data": {
        "id": 987654321,
        "datetime": "2024-01-15 12:30:00+06:00",
        "client": {
            "id": 555777,
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç",
            "phone": "77771234567"
        },
        "services": [
            {
                "id": 111222,
                "title": "–°—Ç—Ä–∏–∂–∫–∞",
                "cost": 5000,  # –≤ —Ç–∏—ã–Ω–∞—Ö (50 —Ç–µ–Ω–≥–µ)
                "amount": 1,
                "discount": 0
            },
            {
                "id": 333444,
                "title": "–£–∫–ª–∞–¥–∫–∞",
                "cost": 3000,  # –≤ —Ç–∏—ã–Ω–∞—Ö (30 —Ç–µ–Ω–≥–µ)
                "amount": 1,
                "discount": 500  # —Å–∫–∏–¥–∫–∞ 5 —Ç–µ–Ω–≥–µ
            }
        ],
        "comment": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞",
        "documents": [
            {
                "id": 777888999,
                "type": "receipt"
            }
        ]
    }
}]

def test_webhook():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π webhook –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç
    """
    print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞...")
    print(f"üì° URL: {webhook_url}")
    print(f"üìã –î–∞–Ω–Ω—ã–µ: {json.dumps(test_webhook_data, indent=2, ensure_ascii=False)}")
    
    try:
        headers = {
            "Content-Type": "application/json",
            "User-Agent": "Altegio Webhook Test"
        }
        
        response = requests.post(
            webhook_url, 
            json=test_webhook_data, 
            headers=headers, 
            timeout=60
        )
        
        print(f"\nüìà –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        
        if response.status_code == 200:
            response_data = response.json()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:")
            print(f"üìù –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}:")
            print(f"üìù –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º API –∫–ª—é—á–∞")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 70)
    
    test_webhook()
    
    print("=" * 70)
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("\nüìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
    print("docker-compose logs backend --tail=50")
